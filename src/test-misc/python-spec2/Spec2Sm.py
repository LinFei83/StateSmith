# Autogenerated with StateSmith 0.13.2+aa5928542b575391637cb5e1a7821184f6c3932c.
# Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

import enum
from Spec2SmBase import Spec2SmBase

class Spec2Sm(Spec2SmBase):
    class EventId(enum.Enum):
        DIM = 0
        INC = 1
        OFF = 2

    class StateId(enum.Enum):
        ROOT = 0
        OFF = 1
        ON_GROUP = 2
        ON_HOT = 3
        ON1 = 4
        ON2 = 5

    def __init__(self):
        self.stateId = None
        self.count = 0

    def start(self):
        self.ROOT_enter()
        # ROOT behavior
        # uml: TransitionTo(ROOT.<InitialState>)
        # ROOT.<InitialState> behavior
        # uml: TransitionTo(OFF)
        self.OFF_enter()

    def dispatch_event(self, event_id):
        # STATE: ROOT
        if self.stateId == self.StateId.ROOT:
            if event_id == self.EventId.INC:
                pass
            elif event_id == self.EventId.OFF:
                pass
            elif event_id == self.EventId.DIM:
                pass

        # STATE: OFF
        elif self.stateId == self.StateId.OFF:
            if event_id == self.EventId.INC:
                self.OFF_inc()

        # STATE: ON_GROUP
        elif self.stateId == self.StateId.ON_GROUP:
            if event_id == self.EventId.OFF:
                self.ON_GROUP_off()

        # STATE: ON_HOT
        elif self.stateId == self.StateId.ON_HOT:
            if event_id == self.EventId.DIM:
                self.ON_HOT_dim()
            elif event_id == self.EventId.OFF:
                self.ON_GROUP_off()

        # STATE: ON1
        elif self.stateId == self.StateId.ON1:
            if event_id == self.EventId.INC:
                self.ON1_inc()
            elif event_id == self.EventId.DIM:
                self.ON1_dim()
            elif event_id == self.EventId.OFF:
                self.ON_GROUP_off()

        # STATE: ON2
        elif self.stateId == self.StateId.ON2:
            if event_id == self.EventId.INC:
                self.ON2_inc()
            elif event_id == self.EventId.DIM:
                self.ON2_dim()
            elif event_id == self.EventId.OFF:
                self.ON_GROUP_off()

    def exit_up_to_state_handler(self, desired_state):
        while self.stateId != desired_state:
            match self.stateId:
                case self.StateId.OFF:
                    self.OFF_exit()
                case self.StateId.ON_GROUP:
                    self.ON_GROUP_exit()
                case self.StateId.ON_HOT:
                    self.ON_HOT_exit()
                case self.StateId.ON1:
                    self.ON1_exit()
                case self.StateId.ON2:
                    self.ON2_exit()
                case _:
                    return

    # Event handlers for state ROOT
    def ROOT_enter(self):
        self.stateId = self.StateId.ROOT

    # Event handlers for state OFF
    def OFF_enter(self):
        self.stateId = self.StateId.OFF
        print("Light is: OFF")

    def OFF_exit(self):
        self.stateId = self.StateId.ROOT

    def OFF_inc(self):
        self.OFF_exit()
        self.ON_GROUP_enter()
        self.ON1_enter()

    # Event handlers for state ON_GROUP
    def ON_GROUP_enter(self):
        self.stateId = self.StateId.ON_GROUP

    def ON_GROUP_exit(self):
        self.stateId = self.StateId.ROOT

    def ON_GROUP_off(self):
        self.exit_up_to_state_handler(self.StateId.ROOT)
        self.OFF_enter()

    # Event handlers for state ON_HOT
    def ON_HOT_enter(self):
        self.stateId = self.StateId.ON_HOT
        self.light_red()

    def ON_HOT_exit(self):
        self.stateId = self.StateId.ON_GROUP

    def ON_HOT_dim(self):
        self.ON_HOT_exit()
        self.ON2_enter()

    # Event handlers for state ON1
    def ON1_enter(self):
        self.stateId = self.StateId.ON1
        self.light_blue()

    def ON1_exit(self):
        self.stateId = self.StateId.ON_GROUP

    def ON1_dim(self):
        self.exit_up_to_state_handler(self.StateId.ROOT)
        self.OFF_enter()

    def ON1_inc(self):
        self.ON1_exit()
        self.ON2_enter()

    # Event handlers for state ON2
    def ON2_enter(self):
        self.stateId = self.StateId.ON2
        self.light_yellow()
        self.count = 0

    def ON2_exit(self):
        self.stateId = self.StateId.ON_GROUP

    def ON2_dim(self):
        self.ON2_exit()
        self.ON1_enter()

    def ON2_inc(self):
        self.count += 1
        print(f"    Count: {self.count}")
        if self.count >= 3:
            self.ON2_exit()
            self.ON_HOT_enter()

    # Helper methods
    def light_red(self):
        print("Light is: RED")

    def light_blue(self):
        print("Light is: BLUE")

    def light_yellow(self):
        print("Light is: YELLOW")

    @staticmethod
    def state_id_to_string(state_id):
        match state_id:
            case Spec2Sm.StateId.ROOT:
                return "ROOT"
            case Spec2Sm.StateId.OFF:
                return "OFF"
            case Spec2Sm.StateId.ON_GROUP:
                return "ON_GROUP"
            case Spec2Sm.StateId.ON_HOT:
                return "ON_HOT"
            case Spec2Sm.StateId.ON1:
                return "ON1"
            case Spec2Sm.StateId.ON2:
                return "ON2"
            case _:
                return "?"

    @staticmethod
    def event_id_to_string(event_id):
        match event_id:
            case Spec2Sm.EventId.DIM:
                return "DIM"
            case Spec2Sm.EventId.INC:
                return "INC"
            case Spec2Sm.EventId.OFF:
                return "OFF"
            case _:
                return "?"
