// Autogenerated with StateSmith 0.10.0-alpha+ab8c57ce711a699bdd49c7944b94ef4dfbf80060.
// Algorithm: Balanced1. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

#pragma once
#include <stdint.h>

typedef enum DiagOnlySm_EventId
{
    DiagOnlySm_EventId_DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
    DiagOnlySm_EventId_MY_EVENT_1 = 1,
    DiagOnlySm_EventId_MY_EVENT_2 = 2,
} DiagOnlySm_EventId;

enum
{
    DiagOnlySm_EventIdCount = 3
};

typedef enum DiagOnlySm_StateId
{
    DiagOnlySm_StateId_ROOT = 0,
    DiagOnlySm_StateId_STATE_1 = 1,
    DiagOnlySm_StateId_STATE_2 = 2,
} DiagOnlySm_StateId;

enum
{
    DiagOnlySm_StateIdCount = 3
};


// Generated state machine
// forward declaration
typedef struct DiagOnlySm DiagOnlySm;

// event handler type
typedef void (*DiagOnlySm_Func)(DiagOnlySm* sm);

// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void DiagOnlySm_ctor(DiagOnlySm* sm);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void DiagOnlySm_start(DiagOnlySm* sm);

// Dispatches an event to the state machine. Not thread safe.
void DiagOnlySm_dispatch_event(DiagOnlySm* sm, DiagOnlySm_EventId event_id);

// Thread safe.
char const * DiagOnlySm_state_id_to_string(DiagOnlySm_StateId id);

// Thread safe.
char const * DiagOnlySm_event_id_to_string(DiagOnlySm_EventId id);

// Generated state machine
struct DiagOnlySm
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    DiagOnlySm_StateId state_id;
    
    // Used internally by state machine. Don't modify.
    DiagOnlySm_Func ancestor_event_handler;
    
    // Used internally by state machine. Don't modify.
    DiagOnlySm_Func current_event_handlers[DiagOnlySm_EventIdCount];
    
    // Used internally by state machine. Don't modify.
    DiagOnlySm_Func current_state_exit_handler;
};

