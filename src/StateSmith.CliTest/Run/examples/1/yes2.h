// Autogenerated with StateSmith 0.9.9-alpha.
// Algorithm: Balanced1. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

#pragma once
#include <stdint.h>

typedef enum yes2_EventId
{
    yes2_EventId_DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
    yes2_EventId_MY_EVENT_1 = 1,
    yes2_EventId_MY_EVENT_2 = 2,
} yes2_EventId;

enum
{
    yes2_EventIdCount = 3
};

typedef enum yes2_StateId
{
    yes2_StateId_ROOT = 0,
    yes2_StateId_STATE_1 = 1,
    yes2_StateId_STATE_2 = 2,
} yes2_StateId;

enum
{
    yes2_StateIdCount = 3
};


// Generated state machine
// forward declaration
typedef struct yes2 yes2;

// event handler type
typedef void (*yes2_Func)(yes2* sm);

// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void yes2_ctor(yes2* sm);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void yes2_start(yes2* sm);

// Dispatches an event to the state machine. Not thread safe.
void yes2_dispatch_event(yes2* sm, yes2_EventId event_id);

// Thread safe.
char const * yes2_state_id_to_string(yes2_StateId id);

// Thread safe.
char const * yes2_event_id_to_string(yes2_EventId id);

// Generated state machine
struct yes2
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    yes2_StateId state_id;
    
    // Used internally by state machine. Don't modify.
    yes2_Func ancestor_event_handler;
    
    // Used internally by state machine. Don't modify.
    yes2_Func current_event_handlers[yes2_EventIdCount];
    
    // Used internally by state machine. Don't modify.
    yes2_Func current_state_exit_handler;
};

