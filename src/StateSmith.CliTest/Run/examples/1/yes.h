// Autogenerated with StateSmith 0.9.9-alpha.
// Algorithm: Balanced1. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

#pragma once
#include <stdint.h>

typedef enum yes_EventId
{
    yes_EventId_DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
    yes_EventId_MY_EVENT_1 = 1,
    yes_EventId_MY_EVENT_2 = 2,
} yes_EventId;

enum
{
    yes_EventIdCount = 3
};

typedef enum yes_StateId
{
    yes_StateId_ROOT = 0,
    yes_StateId_STATE_1 = 1,
    yes_StateId_STATE_2 = 2,
} yes_StateId;

enum
{
    yes_StateIdCount = 3
};


// Generated state machine
// forward declaration
typedef struct yes yes;

// event handler type
typedef void (*yes_Func)(yes* sm);

// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void yes_ctor(yes* sm);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void yes_start(yes* sm);

// Dispatches an event to the state machine. Not thread safe.
void yes_dispatch_event(yes* sm, yes_EventId event_id);

// Thread safe.
char const * yes_state_id_to_string(yes_StateId id);

// Thread safe.
char const * yes_event_id_to_string(yes_EventId id);

// Generated state machine
struct yes
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    yes_StateId state_id;
    
    // Used internally by state machine. Don't modify.
    yes_Func ancestor_event_handler;
    
    // Used internally by state machine. Don't modify.
    yes_Func current_event_handlers[yes_EventIdCount];
    
    // Used internally by state machine. Don't modify.
    yes_Func current_state_exit_handler;
};

