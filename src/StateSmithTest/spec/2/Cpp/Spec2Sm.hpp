// Autogenerated with StateSmith.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

#pragma once  // You can also specify normal include guard. See https://github.com/StateSmith/StateSmith/issues/112
#include <stdint.h>
#include <stdint.h>

// Generated state machine
class Spec2Sm
{
    public: enum EventId
    {
        DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
        EV1 = 1,
        EV10 = 2,
        EV2 = 3,
        EV3 = 4,
        EV4 = 5,
        EV5 = 6,
        EV6 = 7,
        EV7 = 8,
        EV8 = 9,
        EV9 = 10,
        EVBACK = 11,
        EVCLOSE = 12,
        EVOPEN = 13,
        EVSTEP = 14,
    };

    public: enum
    {
        EventIdCount = 15
    };

    public: enum StateId
    {
        ROOT = 0,
        PREFIXING = 1,
        PREFIXING__ORDER_MENU = 2,
        PREFIXING__OM__BEVERAGE = 3,
        PREFIXING__OM__BEV__NONE = 4,
        PREFIXING__OM__BEV__TEA = 5,
        PREFIXING__OM__BEV__WATER = 6,
        PREFIXING__OM__VEG = 7,
        PREFIXING__OM__VEG__NONE = 8,
        PREFIXING__OM__VEG__POTATO = 9,
        PREFIXING__OM__VEG__YAM = 10,
        PREFIXING__SHOWS_MANUAL_PREFIX = 11,
        PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU = 12,
        PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE = 13,
        PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE = 14,
        PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA = 15,
        PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER = 16,
        PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG = 17,
        PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE = 18,
        PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO = 19,
        PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM = 20,
        SPEC2SM__DECIDE = 21,
        TEST1_DO_EVENT_TESTING = 22,
        TEST1_ROOT = 23,
        TEST1_S1 = 24,
        TEST1_S1_1 = 25,
        TEST1_S2 = 26,
        TEST10_CHOICE_POINT = 27,
        TEST10_A = 28,
        TEST10_A_1 = 29,
        TEST10_ROOT = 30,
        TEST10_G = 31,
        TEST10_G_S0 = 32,
        TEST10_G_S1 = 33,
        TEST10_G_S2 = 34,
        TEST10_G_S3 = 35,
        TEST10_S1 = 36,
        TEST10_S4 = 37,
        TEST2_REGULAR_EVENT_TESTING = 38,
        TEST2_ROOT = 39,
        TEST2_S1 = 40,
        TEST2_S1_1 = 41,
        TEST2_S2 = 42,
        TEST3_BEHAVIOR_ORDERING = 43,
        TEST3_ROOT = 44,
        TEST3_S1 = 45,
        TEST3_S2 = 46,
        TEST3_S3 = 47,
        TEST4_PARENT_CHILD_TRANSITIONS = 48,
        TEST4_B_AND_OTHERS = 49,
        TEST4B_LOCAL = 50,
        TEST4B_G = 51,
        TEST4B_G_1 = 52,
        TEST4C_LOCAL_TO_ALIAS = 53,
        TEST4C_G = 54,
        TEST4C_G_1 = 55,
        TEST4D_EXTERNAL = 56,
        TEST4D_G = 57,
        TEST4D_G_1 = 58,
        TEST4_DECIDE = 59,
        TEST4_ROOT = 60,
        TEST4_S1 = 61,
        TEST4_S10 = 62,
        TEST4_S10_1 = 63,
        TEST4_S2 = 64,
        TEST4_S20 = 65,
        TEST4_S20_1 = 66,
        TEST4_S3 = 67,
        TEST5_PARENT_CHILD_TRANSITIONS_ALIAS = 68,
        TEST5_ROOT = 69,
        TEST5_S1 = 70,
        TEST5_S2 = 71,
        TEST5_S3 = 72,
        TEST6_VARS_EXPANSIONS = 73,
        TEST6_ROOT = 74,
        AUTO_VAR_TEST = 75,
        AUTO_VAR_TEST__S1 = 76,
        AUTO_VAR_TEST__S2 = 77,
        META_EXPANSIONS = 78,
        META_EXPANSIONS__S1 = 79,
        META_EXPANSIONS__S2 = 80,
        S3 = 81,
        S4 = 82,
        S5 = 83,
        NORMAL = 84,
        NORMAL__S1 = 85,
        NORMAL__S2 = 86,
        TEST6_VARS_EXPANSIONS__DECIDE = 87,
        TEST7_INITIAL_OR_HISTORY = 88,
        TEST7 = 89,
        T7__DEEP_HISTORY1 = 90,
        T7__DH1__SANTAS_WORKSHOP = 91,
        T7__DH1__ALIENS_DETECTED = 92,
        T7__DH1__GET_BACKUP = 93,
        T7__DH1__HERO = 94,
        T7__DH1__CALL_BATMAN = 95,
        T7__DH1__CALL_THOR = 96,
        T7__DH1__LOCAL_HELP = 97,
        T7__DH1__BUDDY_ELF = 98,
        T7__DH1__POLAR_BEARS = 99,
        T7__DH1__GIVE_COOKIES = 100,
        T7__DH1__SNOWBALL_FIGHT = 101,
        T7__DH1__BUILD = 102,
        T7__DH1__TOOL = 103,
        T7__DH1__CIRCULAR_SAW = 104,
        T7__DH1__IMPACT_DRILL = 105,
        T7__DH1__TOY = 106,
        T7__DH1__GLOW_WORM = 107,
        T7__DH1__RACE_CAR = 108,
        T7__DH1__ROBOT = 109,
        T7__DH1__BATTLEBOT = 110,
        T7__DH1__WALL_E = 111,
        T7__DH1__TEDDY_BEAR = 112,
        T7__DEEP_HISTORY2 = 113,
        T7__DEEP_HISTORY2__T7__STATE_0 = 114,
        T7__DEEP_HISTORY2__T7__STATE_1 = 115,
        T7__DEEP_HISTORY2__T7__STATE_2 = 116,
        T7__DEEP_HISTORY2__T7__STATE_6 = 117,
        T7__DEEP_HISTORY2__T7__STATE_9 = 118,
        T7__DEEP_HISTORY2__T7__STATE_3 = 119,
        T7__DEEP_HISTORY3 = 120,
        T7__DEEP_HISTORY3__T7__STATE_0 = 121,
        T7__DEEP_HISTORY3__T7__STATE_1 = 122,
        T7__DEEP_HISTORY3__T7__STATE_2 = 123,
        T7__DEEP_HISTORY3__T7__STATE_6 = 124,
        T7__DEEP_HISTORY3__T7__STATE_9 = 125,
        T7__DEEP_HISTORY3__T7__STATE_3 = 126,
        T7__HISTORY1 = 127,
        T7__H1__OFF = 128,
        T7__H1__OFF1 = 129,
        T7__H1__OFF2 = 130,
        T7__H1__OFF3 = 131,
        T7__H1__ON = 132,
        T7__H1__ON1 = 133,
        T7__H1__ON2 = 134,
        T7__H1__ON3 = 135,
        T7__INITIAL1 = 136,
        T7__INITIAL1__PARENT = 137,
        T7__INITIAL1__G = 138,
        T7__INITIAL1__G_S1 = 139,
        T7__INITIAL1__G_S2 = 140,
        T7__INITIAL1__G_S3 = 141,
        T7__INITIAL1__S1 = 142,
        TEST7_DECIDE = 143,
        TEST8_ENTRY_CHOICE = 144,
        TEST8_ROOT = 145,
        TEST8_G = 146,
        TEST8_G_S1 = 147,
        TEST8_G_S2 = 148,
        TEST8_G_S3 = 149,
        TEST8_S1 = 150,
        TEST9_EXIT_CHOICE = 151,
        TEST9_DECIDE = 152,
        TEST9_ROOT = 153,
        TEST9_G_S1 = 154,
        TEST9_G_S2 = 155,
        TEST9_G_S3 = 156,
        TEST9_G_S4 = 157,
        TEST9_S1 = 158,
        TEST9_S1_1 = 159,
        TEST9A_ROOT = 160,
        TEST9A_S1 = 161,
        TEST9A_S1_1 = 162,
        TEST9B_ROOT = 163,
        TEST9B_ROOT__A1 = 164,
        TEST9B_ROOT__A2 = 165,
        TEST9B_ROOT__A3 = 166,
        TEST9B_ROOT__A4 = 167,
        TEST9B_ROOT__B1 = 168,
        TEST9B_ROOT__B2 = 169,
        TEST9B_ROOT__B3 = 170,
        TEST9B_ROOT__B4 = 171,
        UNREACHABLE = 172,
        USELESS = 173,
    };

    public: enum
    {
        StateIdCount = 174
    };

    public: enum T7__H1__ON_HistoryId
    {
        T7__H1__ON1 = 0, // default transition
        T7__H1__ON2 = 1,
        T7__H1__ON3 = 2,
    };


    public: enum T7__H1__OFF_HistoryId
    {
        T7__H1__OFF1 = 0, // default transition
        T7__H1__OFF2 = 1,
        T7__H1__OFF3 = 2,
    };


    public: enum T7__DH1__ALIENS_DETECTED_HistoryId
    {
        T7__DH1__SNOWBALL_FIGHT = 0, // default transition
        T7__DH1__GIVE_COOKIES = 1,
        T7__DH1__HERO = 2,
        T7__DH1__BUDDY_ELF = 3,
        T7__DH1__POLAR_BEARS = 4,
    };


    public: enum T7__DH1__GET_BACKUP_HistoryId
    {
        T7__DH1__GET_BACKUP_CHOICEPOINT = 0, // default transition
        T7__DH1__HERO = 1,
        T7__DH1__BUDDY_ELF = 2,
        T7__DH1__POLAR_BEARS = 3,
    };


    public: enum T7__DH1__BUILD_HistoryId
    {
        T7__DH1__TOY = 0, // default transition
        T7__DH1__TOOL = 1,
        T7__DH1__RACE_CAR = 2,
        T7__DH1__TEDDY_BEAR = 3,
        T7__DH1__GLOW_WORM = 4,
        T7__DH1__ROBOT = 5,
        T7__DH1__BATTLEBOT = 6,
        T7__DH1__WALL_E = 7,
        T7__DH1__IMPACT_DRILL = 8,
        T7__DH1__CIRCULAR_SAW = 9,
    };


    public: enum T7__DEEP_HISTORY2__T7__state_0_HistoryId
    {
        T7__DEEP_HISTORY2__T7__STATE_1 = 0, // default transition
        T7__DEEP_HISTORY2__T7__STATE_2 = 1,
        T7__DEEP_HISTORY2__T7__STATE_6 = 2,
        T7__DEEP_HISTORY2__T7__STATE_9 = 3,
    };


    public: enum T7__DEEP_HISTORY3__T7__state_0_HistoryId
    {
        T7__DEEP_HISTORY3__T7__STATE_1 = 0, // default transition
        T7__DEEP_HISTORY3__T7__STATE_2 = 1,
    };


    // Used internally by state machine. Feel free to inspect, but don't modify.
    public: StateId stateId;

    // State machine variables. Can be used for inputs, outputs, user variables...
    public: class Vars
    {
        public: T7__H1__ON_HistoryId T7__H1__ON_history;
        public: T7__H1__OFF_HistoryId T7__H1__OFF_history;
        public: T7__DH1__ALIENS_DETECTED_HistoryId T7__DH1__ALIENS_DETECTED_history;
        public: T7__DH1__GET_BACKUP_HistoryId T7__DH1__GET_BACKUP_history;
        public: T7__DH1__BUILD_HistoryId T7__DH1__BUILD_history;
        public: T7__DEEP_HISTORY2__T7__state_0_HistoryId T7__DEEP_HISTORY2__T7__state_0_history;
        public: T7__DEEP_HISTORY3__T7__state_0_HistoryId T7__DEEP_HISTORY3__T7__state_0_history;
        uint8_t count;
        uint8_t auto_var_1;
    };

    // Variables. Can be used for inputs, outputs, user variables...
    public: Vars vars { };

    // State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
    public: Spec2Sm()
    {
    }

    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    public: void start();

    // Dispatches an event to the state machine. Not thread safe.
    // Note! This function assumes that the `eventId` parameter is valid.
    public: void dispatchEvent(EventId eventId);

    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    private: void exitUpToStateHandler(StateId desiredState);


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////

    private: void ROOT_enter();

    private: void ROOT_do();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING
    ////////////////////////////////////////////////////////////////////////////////

    private: void PREFIXING_enter();

    private: void PREFIXING_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__ORDER_MENU
    ////////////////////////////////////////////////////////////////////////////////

    private: void PREFIXING__ORDER_MENU_enter();

    private: void PREFIXING__ORDER_MENU_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__OM__BEVERAGE
    ////////////////////////////////////////////////////////////////////////////////

    private: void PREFIXING__OM__BEVERAGE_enter();

    private: void PREFIXING__OM__BEVERAGE_exit();

    private: void PREFIXING__OM__BEVERAGE_ev2();

    private: void PREFIXING__OM__BEVERAGE_InitialState_transition();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__OM__BEV__NONE
    ////////////////////////////////////////////////////////////////////////////////

    private: void PREFIXING__OM__BEV__NONE_enter();

    private: void PREFIXING__OM__BEV__NONE_exit();

    private: void PREFIXING__OM__BEV__NONE_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__OM__BEV__TEA
    ////////////////////////////////////////////////////////////////////////////////

    private: void PREFIXING__OM__BEV__TEA_enter();

    private: void PREFIXING__OM__BEV__TEA_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__OM__BEV__WATER
    ////////////////////////////////////////////////////////////////////////////////

    private: void PREFIXING__OM__BEV__WATER_enter();

    private: void PREFIXING__OM__BEV__WATER_exit();

    private: void PREFIXING__OM__BEV__WATER_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__OM__VEG
    ////////////////////////////////////////////////////////////////////////////////

    private: void PREFIXING__OM__VEG_enter();

    private: void PREFIXING__OM__VEG_exit();

    private: void PREFIXING__OM__VEG_ev2();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__OM__VEG__NONE
    ////////////////////////////////////////////////////////////////////////////////

    private: void PREFIXING__OM__VEG__NONE_enter();

    private: void PREFIXING__OM__VEG__NONE_exit();

    private: void PREFIXING__OM__VEG__NONE_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__OM__VEG__POTATO
    ////////////////////////////////////////////////////////////////////////////////

    private: void PREFIXING__OM__VEG__POTATO_enter();

    private: void PREFIXING__OM__VEG__POTATO_exit();

    private: void PREFIXING__OM__VEG__POTATO_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__OM__VEG__YAM
    ////////////////////////////////////////////////////////////////////////////////

    private: void PREFIXING__OM__VEG__YAM_enter();

    private: void PREFIXING__OM__VEG__YAM_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__SHOWS_MANUAL_PREFIX
    ////////////////////////////////////////////////////////////////////////////////

    private: void PREFIXING__SHOWS_MANUAL_PREFIX_enter();

    private: void PREFIXING__SHOWS_MANUAL_PREFIX_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU
    ////////////////////////////////////////////////////////////////////////////////

    private: void PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU_enter();

    private: void PREFIXING__SHOWS_MANUAL_PREFIX__ORDER_MENU_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE
    ////////////////////////////////////////////////////////////////////////////////

    private: void PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE_enter();

    private: void PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE_exit();

    private: void PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE_ev2();

    private: void PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEVERAGE_InitialState_transition();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE
    ////////////////////////////////////////////////////////////////////////////////

    private: void PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE_enter();

    private: void PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE_exit();

    private: void PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_NONE_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA
    ////////////////////////////////////////////////////////////////////////////////

    private: void PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA_enter();

    private: void PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_TEA_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER
    ////////////////////////////////////////////////////////////////////////////////

    private: void PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER_enter();

    private: void PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER_exit();

    private: void PREFIXING__SHOWS_MANUAL_PREFIX__OM_BEV_WATER_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG
    ////////////////////////////////////////////////////////////////////////////////

    private: void PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_enter();

    private: void PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_exit();

    private: void PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_ev2();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE
    ////////////////////////////////////////////////////////////////////////////////

    private: void PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE_enter();

    private: void PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE_exit();

    private: void PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_NONE_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO
    ////////////////////////////////////////////////////////////////////////////////

    private: void PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO_enter();

    private: void PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO_exit();

    private: void PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_POTATO_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM
    ////////////////////////////////////////////////////////////////////////////////

    private: void PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM_enter();

    private: void PREFIXING__SHOWS_MANUAL_PREFIX__OM_VEG_YAM_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state SPEC2SM__DECIDE
    ////////////////////////////////////////////////////////////////////////////////

    private: void SPEC2SM__DECIDE_enter();

    private: void SPEC2SM__DECIDE_exit();

    private: void SPEC2SM__DECIDE_do();

    private: void SPEC2SM__DECIDE_ev1();

    private: void SPEC2SM__DECIDE_ev10();

    private: void SPEC2SM__DECIDE_ev2();

    private: void SPEC2SM__DECIDE_ev3();

    private: void SPEC2SM__DECIDE_ev4();

    private: void SPEC2SM__DECIDE_ev5();

    private: void SPEC2SM__DECIDE_ev6();

    private: void SPEC2SM__DECIDE_ev7();

    private: void SPEC2SM__DECIDE_ev8();

    private: void SPEC2SM__DECIDE_ev9();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST1_DO_EVENT_TESTING
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST1_DO_EVENT_TESTING_enter();

    private: void TEST1_DO_EVENT_TESTING_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST1_ROOT
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST1_ROOT_enter();

    private: void TEST1_ROOT_exit();

    private: void TEST1_ROOT_do();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST1_S1
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST1_S1_enter();

    private: void TEST1_S1_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST1_S1_1
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST1_S1_1_enter();

    private: void TEST1_S1_1_exit();

    private: void TEST1_S1_1_do();

    private: void TEST1_S1_1_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST1_S2
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST1_S2_enter();

    private: void TEST1_S2_exit();

    private: void TEST1_S2_do();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST10_CHOICE_POINT
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST10_CHOICE_POINT_enter();

    private: void TEST10_CHOICE_POINT_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST10_A
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST10_A_enter();

    private: void TEST10_A_exit();

    private: void TEST10_A_ChoicePoint__transition();

    private: void TEST10_A_ChoicePoint__transition_kid_index3();

    private: void TEST10_A_ChoicePoint_a__transition();

    private: void TEST10_A_ChoicePoint_a__transition_kid_index5();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST10_A_1
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST10_A_1_enter();

    private: void TEST10_A_1_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST10_ROOT
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST10_ROOT_enter();

    private: void TEST10_ROOT_exit();

    private: void TEST10_ROOT_ev5();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST10_G
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST10_G_enter();

    private: void TEST10_G_exit();

    private: void TEST10_G_ChoicePoint__transition();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST10_G_S0
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST10_G_S0_enter();

    private: void TEST10_G_S0_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST10_G_S1
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST10_G_S1_enter();

    private: void TEST10_G_S1_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST10_G_S2
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST10_G_S2_enter();

    private: void TEST10_G_S2_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST10_G_S3
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST10_G_S3_enter();

    private: void TEST10_G_S3_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST10_S1
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST10_S1_enter();

    private: void TEST10_S1_exit();

    private: void TEST10_S1_ev1();

    private: void TEST10_S1_ev10();

    private: void TEST10_S1_ev2();

    private: void TEST10_S1_ev3();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST10_S4
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST10_S4_enter();

    private: void TEST10_S4_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST2_REGULAR_EVENT_TESTING
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST2_REGULAR_EVENT_TESTING_enter();

    private: void TEST2_REGULAR_EVENT_TESTING_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST2_ROOT
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST2_ROOT_enter();

    private: void TEST2_ROOT_exit();

    private: void TEST2_ROOT_do();

    private: void TEST2_ROOT_ev1();

    private: void TEST2_ROOT_ev2();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST2_S1
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST2_S1_enter();

    private: void TEST2_S1_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST2_S1_1
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST2_S1_1_enter();

    private: void TEST2_S1_1_exit();

    private: void TEST2_S1_1_do();

    private: void TEST2_S1_1_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST2_S2
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST2_S2_enter();

    private: void TEST2_S2_exit();

    private: void TEST2_S2_ev1();

    private: void TEST2_S2_ev2();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST3_BEHAVIOR_ORDERING
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST3_BEHAVIOR_ORDERING_enter();

    private: void TEST3_BEHAVIOR_ORDERING_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST3_ROOT
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST3_ROOT_enter();

    private: void TEST3_ROOT_exit();

    private: void TEST3_ROOT_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST3_S1
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST3_S1_enter();

    private: void TEST3_S1_exit();

    private: void TEST3_S1_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST3_S2
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST3_S2_enter();

    private: void TEST3_S2_exit();

    private: void TEST3_S2_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST3_S3
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST3_S3_enter();

    private: void TEST3_S3_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4_PARENT_CHILD_TRANSITIONS
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST4_PARENT_CHILD_TRANSITIONS_enter();

    private: void TEST4_PARENT_CHILD_TRANSITIONS_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4_B_AND_OTHERS
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST4_B_AND_OTHERS_enter();

    private: void TEST4_B_AND_OTHERS_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4B_LOCAL
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST4B_LOCAL_enter();

    private: void TEST4B_LOCAL_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4B_G
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST4B_G_enter();

    private: void TEST4B_G_exit();

    private: void TEST4B_G_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4B_G_1
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST4B_G_1_enter();

    private: void TEST4B_G_1_exit();

    private: void TEST4B_G_1_ev2();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4C_LOCAL_TO_ALIAS
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST4C_LOCAL_TO_ALIAS_enter();

    private: void TEST4C_LOCAL_TO_ALIAS_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4C_G
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST4C_G_enter();

    private: void TEST4C_G_exit();

    private: void TEST4C_G_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4C_G_1
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST4C_G_1_enter();

    private: void TEST4C_G_1_exit();

    private: void TEST4C_G_1_ev2();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4D_EXTERNAL
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST4D_EXTERNAL_enter();

    private: void TEST4D_EXTERNAL_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4D_G
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST4D_G_enter();

    private: void TEST4D_G_exit();

    private: void TEST4D_G_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4D_G_1
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST4D_G_1_enter();

    private: void TEST4D_G_1_exit();

    private: void TEST4D_G_1_ev2();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4_DECIDE
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST4_DECIDE_enter();

    private: void TEST4_DECIDE_exit();

    private: void TEST4_DECIDE_ev1();

    private: void TEST4_DECIDE_ev2();

    private: void TEST4_DECIDE_ev3();

    private: void TEST4_DECIDE_ev4();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4_ROOT
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST4_ROOT_enter();

    private: void TEST4_ROOT_exit();

    private: void TEST4_ROOT_ev2();

    private: void TEST4_ROOT_ev3();

    private: void TEST4_ROOT_ev4();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4_S1
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST4_S1_enter();

    private: void TEST4_S1_exit();

    private: void TEST4_S1_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4_S10
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST4_S10_enter();

    private: void TEST4_S10_exit();

    private: void TEST4_S10_ev4();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4_S10_1
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST4_S10_1_enter();

    private: void TEST4_S10_1_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4_S2
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST4_S2_enter();

    private: void TEST4_S2_exit();

    private: void TEST4_S2_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4_S20
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST4_S20_enter();

    private: void TEST4_S20_exit();

    private: void TEST4_S20_ev4();

    private: void TEST4_S20_InitialState_transition();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4_S20_1
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST4_S20_1_enter();

    private: void TEST4_S20_1_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST4_S3
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST4_S3_enter();

    private: void TEST4_S3_exit();

    private: void TEST4_S3_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST5_PARENT_CHILD_TRANSITIONS_ALIAS
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST5_PARENT_CHILD_TRANSITIONS_ALIAS_enter();

    private: void TEST5_PARENT_CHILD_TRANSITIONS_ALIAS_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST5_ROOT
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST5_ROOT_enter();

    private: void TEST5_ROOT_exit();

    private: void TEST5_ROOT_ev2();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST5_S1
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST5_S1_enter();

    private: void TEST5_S1_exit();

    private: void TEST5_S1_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST5_S2
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST5_S2_enter();

    private: void TEST5_S2_exit();

    private: void TEST5_S2_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST5_S3
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST5_S3_enter();

    private: void TEST5_S3_exit();

    private: void TEST5_S3_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST6_VARS_EXPANSIONS
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST6_VARS_EXPANSIONS_enter();

    private: void TEST6_VARS_EXPANSIONS_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST6_ROOT
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST6_ROOT_enter();

    private: void TEST6_ROOT_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state AUTO_VAR_TEST
    ////////////////////////////////////////////////////////////////////////////////

    private: void AUTO_VAR_TEST_enter();

    private: void AUTO_VAR_TEST_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state AUTO_VAR_TEST__S1
    ////////////////////////////////////////////////////////////////////////////////

    private: void AUTO_VAR_TEST__S1_enter();

    private: void AUTO_VAR_TEST__S1_exit();

    private: void AUTO_VAR_TEST__S1_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state AUTO_VAR_TEST__S2
    ////////////////////////////////////////////////////////////////////////////////

    private: void AUTO_VAR_TEST__S2_enter();

    private: void AUTO_VAR_TEST__S2_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state META_EXPANSIONS
    ////////////////////////////////////////////////////////////////////////////////

    private: void META_EXPANSIONS_enter();

    private: void META_EXPANSIONS_exit();

    private: void META_EXPANSIONS_ChoicePoint_2__transition();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state META_EXPANSIONS__S1
    ////////////////////////////////////////////////////////////////////////////////

    private: void META_EXPANSIONS__S1_enter();

    private: void META_EXPANSIONS__S1_exit();

    private: void META_EXPANSIONS__S1_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state META_EXPANSIONS__S2
    ////////////////////////////////////////////////////////////////////////////////

    private: void META_EXPANSIONS__S2_enter();

    private: void META_EXPANSIONS__S2_exit();

    private: void META_EXPANSIONS__S2_ev1();

    private: void META_EXPANSIONS__S2_ev2();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state S3
    ////////////////////////////////////////////////////////////////////////////////

    private: void S3_enter();

    private: void S3_exit();

    private: void S3_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state S4
    ////////////////////////////////////////////////////////////////////////////////

    private: void S4_enter();

    private: void S4_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state S5
    ////////////////////////////////////////////////////////////////////////////////

    private: void S5_enter();

    private: void S5_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state NORMAL
    ////////////////////////////////////////////////////////////////////////////////

    private: void NORMAL_enter();

    private: void NORMAL_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state NORMAL__S1
    ////////////////////////////////////////////////////////////////////////////////

    private: void NORMAL__S1_enter();

    private: void NORMAL__S1_exit();

    private: void NORMAL__S1_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state NORMAL__S2
    ////////////////////////////////////////////////////////////////////////////////

    private: void NORMAL__S2_enter();

    private: void NORMAL__S2_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST6_VARS_EXPANSIONS__DECIDE
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST6_VARS_EXPANSIONS__DECIDE_enter();

    private: void TEST6_VARS_EXPANSIONS__DECIDE_exit();

    private: void TEST6_VARS_EXPANSIONS__DECIDE_ev1();

    private: void TEST6_VARS_EXPANSIONS__DECIDE_ev2();

    private: void TEST6_VARS_EXPANSIONS__DECIDE_ev3();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST7_INITIAL_OR_HISTORY
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST7_INITIAL_OR_HISTORY_enter();

    private: void TEST7_INITIAL_OR_HISTORY_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST7
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST7_enter();

    private: void TEST7_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY1
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DEEP_HISTORY1_enter();

    private: void T7__DEEP_HISTORY1_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__SANTAS_WORKSHOP
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DH1__SANTAS_WORKSHOP_enter();

    private: void T7__DH1__SANTAS_WORKSHOP_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__ALIENS_DETECTED
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DH1__ALIENS_DETECTED_enter();

    private: void T7__DH1__ALIENS_DETECTED_exit();

    private: void T7__DH1__ALIENS_DETECTED_ev8();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__GET_BACKUP
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DH1__GET_BACKUP_enter();

    private: void T7__DH1__GET_BACKUP_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__HERO
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DH1__HERO_enter();

    private: void T7__DH1__HERO_exit();

    private: void T7__DH1__HERO_InitialState_transition();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__CALL_BATMAN
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DH1__CALL_BATMAN_enter();

    private: void T7__DH1__CALL_BATMAN_exit();

    private: void T7__DH1__CALL_BATMAN_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__CALL_THOR
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DH1__CALL_THOR_enter();

    private: void T7__DH1__CALL_THOR_exit();

    private: void T7__DH1__CALL_THOR_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__LOCAL_HELP
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DH1__LOCAL_HELP_enter();

    private: void T7__DH1__LOCAL_HELP_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__BUDDY_ELF
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DH1__BUDDY_ELF_enter();

    private: void T7__DH1__BUDDY_ELF_exit();

    private: void T7__DH1__BUDDY_ELF_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__POLAR_BEARS
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DH1__POLAR_BEARS_enter();

    private: void T7__DH1__POLAR_BEARS_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__GIVE_COOKIES
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DH1__GIVE_COOKIES_enter();

    private: void T7__DH1__GIVE_COOKIES_exit();

    private: void T7__DH1__GIVE_COOKIES_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__SNOWBALL_FIGHT
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DH1__SNOWBALL_FIGHT_enter();

    private: void T7__DH1__SNOWBALL_FIGHT_exit();

    private: void T7__DH1__SNOWBALL_FIGHT_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__BUILD
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DH1__BUILD_enter();

    private: void T7__DH1__BUILD_exit();

    private: void T7__DH1__BUILD_ev6();

    private: void T7__DH1__BUILD_ev7();

    private: void T7__DH1__BUILD_InitialState_transition();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__TOOL
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DH1__TOOL_enter();

    private: void T7__DH1__TOOL_exit();

    private: void T7__DH1__TOOL_ev2();

    private: void T7__DH1__TOOL_InitialState_transition();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__CIRCULAR_SAW
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DH1__CIRCULAR_SAW_enter();

    private: void T7__DH1__CIRCULAR_SAW_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__IMPACT_DRILL
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DH1__IMPACT_DRILL_enter();

    private: void T7__DH1__IMPACT_DRILL_exit();

    private: void T7__DH1__IMPACT_DRILL_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__TOY
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DH1__TOY_enter();

    private: void T7__DH1__TOY_exit();

    private: void T7__DH1__TOY_ev1();

    private: void T7__DH1__TOY_InitialState_transition();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__GLOW_WORM
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DH1__GLOW_WORM_enter();

    private: void T7__DH1__GLOW_WORM_exit();

    private: void T7__DH1__GLOW_WORM_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__RACE_CAR
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DH1__RACE_CAR_enter();

    private: void T7__DH1__RACE_CAR_exit();

    private: void T7__DH1__RACE_CAR_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__ROBOT
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DH1__ROBOT_enter();

    private: void T7__DH1__ROBOT_exit();

    private: void T7__DH1__ROBOT_InitialState_transition();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__BATTLEBOT
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DH1__BATTLEBOT_enter();

    private: void T7__DH1__BATTLEBOT_exit();

    private: void T7__DH1__BATTLEBOT_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__WALL_E
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DH1__WALL_E_enter();

    private: void T7__DH1__WALL_E_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DH1__TEDDY_BEAR
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DH1__TEDDY_BEAR_enter();

    private: void T7__DH1__TEDDY_BEAR_exit();

    private: void T7__DH1__TEDDY_BEAR_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY2
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DEEP_HISTORY2_enter();

    private: void T7__DEEP_HISTORY2_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY2__T7__STATE_0
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DEEP_HISTORY2__T7__STATE_0_enter();

    private: void T7__DEEP_HISTORY2__T7__STATE_0_exit();

    private: void T7__DEEP_HISTORY2__T7__STATE_0_evopen();

    private: void T7__DEEP_HISTORY2__T7__state_0_InitialState_transition();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY2__T7__STATE_1
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DEEP_HISTORY2__T7__STATE_1_enter();

    private: void T7__DEEP_HISTORY2__T7__STATE_1_exit();

    private: void T7__DEEP_HISTORY2__T7__STATE_1_evstep();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY2__T7__STATE_2
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DEEP_HISTORY2__T7__STATE_2_enter();

    private: void T7__DEEP_HISTORY2__T7__STATE_2_exit();

    private: void T7__DEEP_HISTORY2__T7__STATE_2_evback();

    private: void T7__DEEP_HISTORY2__T7__state_2_InitialState_transition();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY2__T7__STATE_6
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DEEP_HISTORY2__T7__STATE_6_enter();

    private: void T7__DEEP_HISTORY2__T7__STATE_6_exit();

    private: void T7__DEEP_HISTORY2__T7__STATE_6_evstep();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY2__T7__STATE_9
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DEEP_HISTORY2__T7__STATE_9_enter();

    private: void T7__DEEP_HISTORY2__T7__STATE_9_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY2__T7__STATE_3
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DEEP_HISTORY2__T7__STATE_3_enter();

    private: void T7__DEEP_HISTORY2__T7__STATE_3_exit();

    private: void T7__DEEP_HISTORY2__T7__STATE_3_evclose();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY3
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DEEP_HISTORY3_enter();

    private: void T7__DEEP_HISTORY3_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY3__T7__STATE_0
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DEEP_HISTORY3__T7__STATE_0_enter();

    private: void T7__DEEP_HISTORY3__T7__STATE_0_exit();

    private: void T7__DEEP_HISTORY3__T7__STATE_0_evopen();

    private: void T7__DEEP_HISTORY3__T7__state_0_InitialState_transition();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY3__T7__STATE_1
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DEEP_HISTORY3__T7__STATE_1_enter();

    private: void T7__DEEP_HISTORY3__T7__STATE_1_exit();

    private: void T7__DEEP_HISTORY3__T7__STATE_1_evstep();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY3__T7__STATE_2
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DEEP_HISTORY3__T7__STATE_2_enter();

    private: void T7__DEEP_HISTORY3__T7__STATE_2_exit();

    private: void T7__DEEP_HISTORY3__T7__STATE_2_evback();

    private: void T7__DEEP_HISTORY3__T7__state_2_InitialState_transition();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY3__T7__STATE_6
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DEEP_HISTORY3__T7__STATE_6_enter();

    private: void T7__DEEP_HISTORY3__T7__STATE_6_exit();

    private: void T7__DEEP_HISTORY3__T7__STATE_6_evstep();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY3__T7__STATE_9
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DEEP_HISTORY3__T7__STATE_9_enter();

    private: void T7__DEEP_HISTORY3__T7__STATE_9_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__DEEP_HISTORY3__T7__STATE_3
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__DEEP_HISTORY3__T7__STATE_3_enter();

    private: void T7__DEEP_HISTORY3__T7__STATE_3_exit();

    private: void T7__DEEP_HISTORY3__T7__STATE_3_evclose();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__HISTORY1
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__HISTORY1_enter();

    private: void T7__HISTORY1_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__H1__OFF
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__H1__OFF_enter();

    private: void T7__H1__OFF_exit();

    private: void T7__H1__OFF_ev3();

    private: void T7__H1__OFF_ev4();

    private: void T7__H1__OFF_ev7();

    private: void T7__H1__OFF_InitialState_transition();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__H1__OFF1
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__H1__OFF1_enter();

    private: void T7__H1__OFF1_exit();

    private: void T7__H1__OFF1_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__H1__OFF2
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__H1__OFF2_enter();

    private: void T7__H1__OFF2_exit();

    private: void T7__H1__OFF2_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__H1__OFF3
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__H1__OFF3_enter();

    private: void T7__H1__OFF3_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__H1__ON
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__H1__ON_enter();

    private: void T7__H1__ON_exit();

    private: void T7__H1__ON_ev6();

    private: void T7__H1__ON_InitialState_transition();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__H1__ON1
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__H1__ON1_enter();

    private: void T7__H1__ON1_exit();

    private: void T7__H1__ON1_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__H1__ON2
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__H1__ON2_enter();

    private: void T7__H1__ON2_exit();

    private: void T7__H1__ON2_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__H1__ON3
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__H1__ON3_enter();

    private: void T7__H1__ON3_exit();

    private: void T7__H1__ON3_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__INITIAL1
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__INITIAL1_enter();

    private: void T7__INITIAL1_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__INITIAL1__PARENT
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__INITIAL1__PARENT_enter();

    private: void T7__INITIAL1__PARENT_exit();

    private: void T7__INITIAL1__PARENT_ev5();

    private: void T7__INITIAL1__PARENT_InitialState_transition();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__INITIAL1__G
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__INITIAL1__G_enter();

    private: void T7__INITIAL1__G_exit();

    private: void T7__INITIAL1__G_ev2();

    private: void T7__INITIAL1__G_InitialState_transition();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__INITIAL1__G_S1
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__INITIAL1__G_S1_enter();

    private: void T7__INITIAL1__G_S1_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__INITIAL1__G_S2
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__INITIAL1__G_S2_enter();

    private: void T7__INITIAL1__G_S2_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__INITIAL1__G_S3
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__INITIAL1__G_S3_enter();

    private: void T7__INITIAL1__G_S3_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state T7__INITIAL1__S1
    ////////////////////////////////////////////////////////////////////////////////

    private: void T7__INITIAL1__S1_enter();

    private: void T7__INITIAL1__S1_exit();

    private: void T7__INITIAL1__S1_ev1();

    private: void T7__INITIAL1__S1_ev3();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST7_DECIDE
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST7_DECIDE_enter();

    private: void TEST7_DECIDE_exit();

    private: void TEST7_DECIDE_ev1();

    private: void TEST7_DECIDE_ev2();

    private: void TEST7_DECIDE_ev3();

    private: void TEST7_DECIDE_ev4();

    private: void TEST7_DECIDE_ev5();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST8_ENTRY_CHOICE
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST8_ENTRY_CHOICE_enter();

    private: void TEST8_ENTRY_CHOICE_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST8_ROOT
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST8_ROOT_enter();

    private: void TEST8_ROOT_exit();

    private: void TEST8_ROOT_ev3();

    private: void TEST8_ROOT_ev5();

    private: void TEST8_ROOT_EntryPoint_1__transition();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST8_G
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST8_G_enter();

    private: void TEST8_G_exit();

    private: void TEST8_G_ev2();

    private: void TEST8_G_EntryPoint_1__transition();

    private: void TEST8_G_EntryPoint_3__transition();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST8_G_S1
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST8_G_S1_enter();

    private: void TEST8_G_S1_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST8_G_S2
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST8_G_S2_enter();

    private: void TEST8_G_S2_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST8_G_S3
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST8_G_S3_enter();

    private: void TEST8_G_S3_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST8_S1
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST8_S1_enter();

    private: void TEST8_S1_exit();

    private: void TEST8_S1_ev1();

    private: void TEST8_S1_ev3();

    private: void TEST8_S1_ev6();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9_EXIT_CHOICE
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST9_EXIT_CHOICE_enter();

    private: void TEST9_EXIT_CHOICE_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9_DECIDE
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST9_DECIDE_enter();

    private: void TEST9_DECIDE_exit();

    private: void TEST9_DECIDE_ev1();

    private: void TEST9_DECIDE_ev2();

    private: void TEST9_DECIDE_ev3();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9_ROOT
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST9_ROOT_enter();

    private: void TEST9_ROOT_exit();

    private: void TEST9_ROOT_ev5();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9_G_S1
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST9_G_S1_enter();

    private: void TEST9_G_S1_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9_G_S2
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST9_G_S2_enter();

    private: void TEST9_G_S2_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9_G_S3
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST9_G_S3_enter();

    private: void TEST9_G_S3_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9_G_S4
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST9_G_S4_enter();

    private: void TEST9_G_S4_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9_S1
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST9_S1_enter();

    private: void TEST9_S1_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9_S1_1
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST9_S1_1_enter();

    private: void TEST9_S1_1_exit();

    private: void TEST9_S1_1_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9A_ROOT
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST9A_ROOT_enter();

    private: void TEST9A_ROOT_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9A_S1
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST9A_S1_enter();

    private: void TEST9A_S1_exit();

    private: void TEST9A_S1_InitialState_transition();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9A_S1_1
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST9A_S1_1_enter();

    private: void TEST9A_S1_1_exit();

    private: void TEST9A_S1_1_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9B_ROOT
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST9B_ROOT_enter();

    private: void TEST9B_ROOT_exit();

    private: void TEST9B_ROOT_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9B_ROOT__A1
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST9B_ROOT__A1_enter();

    private: void TEST9B_ROOT__A1_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9B_ROOT__A2
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST9B_ROOT__A2_enter();

    private: void TEST9B_ROOT__A2_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9B_ROOT__A3
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST9B_ROOT__A3_enter();

    private: void TEST9B_ROOT__A3_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9B_ROOT__A4
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST9B_ROOT__A4_enter();

    private: void TEST9B_ROOT__A4_exit();

    private: void TEST9B_ROOT__A4_ev1();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9B_ROOT__B1
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST9B_ROOT__B1_enter();

    private: void TEST9B_ROOT__B1_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9B_ROOT__B2
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST9B_ROOT__B2_enter();

    private: void TEST9B_ROOT__B2_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9B_ROOT__B3
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST9B_ROOT__B3_enter();

    private: void TEST9B_ROOT__B3_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state TEST9B_ROOT__B4
    ////////////////////////////////////////////////////////////////////////////////

    private: void TEST9B_ROOT__B4_enter();

    private: void TEST9B_ROOT__B4_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state UNREACHABLE
    ////////////////////////////////////////////////////////////////////////////////

    private: void UNREACHABLE_enter();

    private: void UNREACHABLE_exit();


    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state USELESS
    ////////////////////////////////////////////////////////////////////////////////

    private: void USELESS_enter();

    private: void USELESS_exit();

    // Thread safe.
    public: static char const * stateIdToString(StateId id);

    // Thread safe.
    public: static char const * eventIdToString(EventId id);
};
