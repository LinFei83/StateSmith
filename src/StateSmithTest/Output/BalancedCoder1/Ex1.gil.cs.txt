// Autogenerated with StateSmith 0.9.3-alpha.
// Algorithm: Balanced1. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

public class ____GilNoEmit_FileTop { }
// Generated state machine
public class Ex1
{
    public enum EventId
    {
        DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
    }
    
    public const int EventIdCount = 1;
    
    public enum StateId
    {
        ROOT = 0,
        STATE_1 = 1,
        STATE_2 = 2,
    }
    
    public const int StateIdCount = 3;
    
    public enum ResultId
    {
        CONSUMED = 0, // dispatched event was consumed.
        ACTIVE = 1,   // dispatched event still active (not consumed).
        INVALID = 2   // event to be dispatched is unknown and was ignored.
    }
    
    public const int ResultIdCount = 3;
    
    public class EventContext
    {
        public EventId id;
        public Func nextHandler; // Users should ignore this field. Used by state machine.
        public ResultId resultId;
    }
    
    // event handler type
    public delegate void Func();
    
    // Used internally by state machine. Feel free to inspect, but don't modify.
    public StateId stateId;
    
    // Used internally by state machine. Don't modify.
    private Func? ancestorEventHandler;
    
    // Used internally by state machine. Don't modify.
    private readonly Func?[] currentEventHandlers = new Func[EventIdCount];
    
    // Used internally by state machine. Don't modify.
    private Func? currentStateExitHandler;
    
    // State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
    public Ex1()
    {
    }
    
    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    public void Start()
    {
        this.ROOT_enter();
        // ROOT behavior
        // uml: TransitionTo(ROOT.InitialState)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ROOT.InitialState`.
            // ROOT.InitialState is a pseudo state and cannot have an `enter` trigger.
            
            // ROOT.InitialState behavior
            // uml: TransitionTo(STATE_1)
            {
                // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `STATE_1`.
                this.STATE_1_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                this.stateId = StateId.STATE_1;
                // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
                return;
            } // end of behavior for ROOT.InitialState
        } // end of behavior for ROOT
    }
    
    // Dispatches an event to the state machine. Not thread safe.
    public ResultId DispatchEvent(EventId eventId)
    {
        if ((int)eventId < 0 || (int)eventId >= (int)EventIdCount) return ResultId.INVALID;
        Func? behaviorFunc = this.currentEventHandlers[(int)eventId];
        
        while (behaviorFunc != null)
        {
            this.ancestorEventHandler = null;
            behaviorFunc();
            behaviorFunc = this.ancestorEventHandler;
        }
        return ResultId.CONSUMED; // FIXME finish here!
    }
    
    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    private void ExitUpToStateHandler(Func desiredStateExitHandler)
    {
        while (this.currentStateExitHandler != desiredStateExitHandler)
        {
            this.currentStateExitHandler!();
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    private void ROOT_enter()
    {
        // setup trigger/event handlers
        this.currentStateExitHandler = this.ROOT_exit;
    }
    
    private void ROOT_exit()
    {
        // State machine root is a special case. It cannot be exited. Mark as unused.
        ____GilNoEmit_UnusedVar(this);
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state STATE_1
    ////////////////////////////////////////////////////////////////////////////////
    
    private void STATE_1_enter()
    {
        // setup trigger/event handlers
        this.currentStateExitHandler = this.STATE_1_exit;
        this.currentEventHandlers[(int)EventId.DO] = this.STATE_1_do;
    }
    
    private void STATE_1_exit()
    {
        // adjust function pointers for this state's exit
        this.currentStateExitHandler = this.ROOT_exit;
        this.currentEventHandlers[(int)EventId.DO] = null;  // no ancestor listens to this event
    }
    
    private void STATE_1_do()
    {
        // No ancestor state handles `do` event.
        
        // STATE_1 behavior
        // uml: do TransitionTo(STATE_2)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.STATE_1_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `STATE_2`.
            this.STATE_2_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = StateId.STATE_2;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for STATE_1
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state STATE_2
    ////////////////////////////////////////////////////////////////////////////////
    
    private void STATE_2_enter()
    {
        // setup trigger/event handlers
        this.currentStateExitHandler = this.STATE_2_exit;
    }
    
    private void STATE_2_exit()
    {
        // adjust function pointers for this state's exit
        this.currentStateExitHandler = this.ROOT_exit;
    }
    
    // Thread safe.
    public static string StateIdToString(StateId id)
    {
        switch (id)
        {
            case StateId.ROOT: return "ROOT";
            case StateId.STATE_1: return "STATE_1";
            case StateId.STATE_2: return "STATE_2";
            default: return "?";
        }
    }
    
    // Thread safe.
    public static string EventIdToString(EventId id)
    {
        switch (id)
        {
            case EventId.DO: return "DO";
            default: return "?";
        }
    }
    
    public static bool ____GilNoEmit_EchoStringBool(string toEcho) { return true; }
    public static bool ____GilNoEmit_VarArgsToBool(params object[] args) { return true; }
    public static void ____GilNoEmit_UnusedVar(object unusedVar) { }
}
