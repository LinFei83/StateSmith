//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PlantUML.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class PlantUMLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		START_UML=25, END_UML=26, HWS=27, LINE_ENDER=28, IDENTIFIER=29, DIGIT=30, 
		BLOCK_COMMENT=31, LINE_COMMENT=32, SYMBOLS=33, SINGLE_QUOTE=34, STRING=35, 
		ENDNOTE=36;
	public const int
		RULE_line_ending_ows = 0, RULE_optional_any_space = 1, RULE_ohs = 2, RULE_start_end_state = 3, 
		RULE_history_state = 4, RULE_state_id = 5, RULE_vertex = 6, RULE_edge = 7, 
		RULE_transition_event_guard_code = 8, RULE_transition = 9, RULE_state_child_states = 10, 
		RULE_stereotype = 11, RULE_state_explicit = 12, RULE_rest_of_line = 13, 
		RULE_state_contents = 14, RULE_ignore = 15, RULE_diagram_element = 16, 
		RULE_note_short = 17, RULE_note_multiline_contents_line = 18, RULE_note_multiline = 19, 
		RULE_note_floating = 20, RULE_note = 21, RULE_startuml = 22, RULE_diagram = 23, 
		RULE_identifier = 24;
	public static readonly string[] ruleNames = {
		"line_ending_ows", "optional_any_space", "ohs", "start_end_state", "history_state", 
		"state_id", "vertex", "edge", "transition_event_guard_code", "transition", 
		"state_child_states", "stereotype", "state_explicit", "rest_of_line", 
		"state_contents", "ignore", "diagram_element", "note_short", "note_multiline_contents_line", 
		"note_multiline", "note_floating", "note", "startuml", "diagram", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'[*]'", "'['", "'h'", "'H'", "']'", "'->'", "'-'", "':'", "'{'", 
		"'}'", "'<<'", "'>>'", "'state'", "'State'", "'as'", "'hide empty description'", 
		"'scale'", "'skin'", "'mainframe'", "'title'", "'skinparam'", "'#'", "'note'", 
		"'end'", "'@startuml'", "'@enduml'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "START_UML", "END_UML", "HWS", "LINE_ENDER", "IDENTIFIER", "DIGIT", 
		"BLOCK_COMMENT", "LINE_COMMENT", "SYMBOLS", "SINGLE_QUOTE", "STRING", 
		"ENDNOTE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PlantUML.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PlantUMLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PlantUMLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PlantUMLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Line_ending_owsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Optional_any_spaceContext[] optional_any_space() {
			return GetRuleContexts<Optional_any_spaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Optional_any_spaceContext optional_any_space(int i) {
			return GetRuleContext<Optional_any_spaceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_ENDER() { return GetToken(PlantUMLParser.LINE_ENDER, 0); }
		public Line_ending_owsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_ending_ows; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.EnterLine_ending_ows(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.ExitLine_ending_ows(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLVisitor<TResult> typedVisitor = visitor as IPlantUMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_ending_ows(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_ending_owsContext line_ending_ows() {
		Line_ending_owsContext _localctx = new Line_ending_owsContext(Context, State);
		EnterRule(_localctx, 0, RULE_line_ending_ows);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			optional_any_space();
			State = 51;
			Match(LINE_ENDER);
			State = 52;
			optional_any_space();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optional_any_spaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HWS() { return GetTokens(PlantUMLParser.HWS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HWS(int i) {
			return GetToken(PlantUMLParser.HWS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINE_ENDER() { return GetTokens(PlantUMLParser.LINE_ENDER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_ENDER(int i) {
			return GetToken(PlantUMLParser.LINE_ENDER, i);
		}
		public Optional_any_spaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optional_any_space; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.EnterOptional_any_space(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.ExitOptional_any_space(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLVisitor<TResult> typedVisitor = visitor as IPlantUMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptional_any_space(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Optional_any_spaceContext optional_any_space() {
		Optional_any_spaceContext _localctx = new Optional_any_spaceContext(Context, State);
		EnterRule(_localctx, 2, RULE_optional_any_space);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 54;
					_la = TokenStream.LA(1);
					if ( !(_la==HWS || _la==LINE_ENDER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 59;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OhsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HWS() { return GetTokens(PlantUMLParser.HWS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HWS(int i) {
			return GetToken(PlantUMLParser.HWS, i);
		}
		public OhsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ohs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.EnterOhs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.ExitOhs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLVisitor<TResult> typedVisitor = visitor as IPlantUMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOhs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OhsContext ohs() {
		OhsContext _localctx = new OhsContext(Context, State);
		EnterRule(_localctx, 4, RULE_ohs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 60;
					Match(HWS);
					}
					} 
				}
				State = 65;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_end_stateContext : ParserRuleContext {
		public Start_end_stateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_end_state; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.EnterStart_end_state(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.ExitStart_end_state(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLVisitor<TResult> typedVisitor = visitor as IPlantUMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart_end_state(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Start_end_stateContext start_end_state() {
		Start_end_stateContext _localctx = new Start_end_stateContext(Context, State);
		EnterRule(_localctx, 6, RULE_start_end_state);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class History_stateContext : ParserRuleContext {
		public History_stateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_history_state; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.EnterHistory_state(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.ExitHistory_state(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLVisitor<TResult> typedVisitor = visitor as IPlantUMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHistory_state(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public History_stateContext history_state() {
		History_stateContext _localctx = new History_stateContext(Context, State);
		EnterRule(_localctx, 8, RULE_history_state);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			Match(T__1);
			State = 69;
			_la = TokenStream.LA(1);
			if ( !(_la==T__2 || _la==T__3) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 70;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class State_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public History_stateContext history_state() {
			return GetRuleContext<History_stateContext>(0);
		}
		public State_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_state_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.EnterState_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.ExitState_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLVisitor<TResult> typedVisitor = visitor as IPlantUMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitState_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public State_idContext state_id() {
		State_idContext _localctx = new State_idContext(Context, State);
		EnterRule(_localctx, 10, RULE_state_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			identifier();
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 73;
				history_state();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VertexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Start_end_stateContext start_end_state() {
			return GetRuleContext<Start_end_stateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public History_stateContext history_state() {
			return GetRuleContext<History_stateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public State_idContext state_id() {
			return GetRuleContext<State_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OhsContext ohs() {
			return GetRuleContext<OhsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StereotypeContext stereotype() {
			return GetRuleContext<StereotypeContext>(0);
		}
		public VertexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.EnterVertex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.ExitVertex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLVisitor<TResult> typedVisitor = visitor as IPlantUMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VertexContext vertex() {
		VertexContext _localctx = new VertexContext(Context, State);
		EnterRule(_localctx, 12, RULE_vertex);
		try {
			State = 84;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 76;
				start_end_state();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 77;
				history_state();
				}
				break;
			case T__12:
			case T__13:
			case T__14:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__22:
			case T__23:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 78;
				state_id();
				State = 82;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 79;
					ohs();
					State = 80;
					stereotype();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PlantUMLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINE_ENDER() { return GetTokens(PlantUMLParser.LINE_ENDER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_ENDER(int i) {
			return GetToken(PlantUMLParser.LINE_ENDER, i);
		}
		public EdgeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edge; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.EnterEdge(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.ExitEdge(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLVisitor<TResult> typedVisitor = visitor as IPlantUMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdge(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgeContext edge() {
		EdgeContext _localctx = new EdgeContext(Context, State);
		EnterRule(_localctx, 14, RULE_edge);
		int _la;
		try {
			State = 102;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86;
				Match(T__5);
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87;
				Match(T__6);
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 88;
					Match(IDENTIFIER);
					}
				}

				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 91;
					Match(T__1);
					State = 95;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << START_UML) | (1L << END_UML) | (1L << HWS) | (1L << IDENTIFIER) | (1L << DIGIT) | (1L << BLOCK_COMMENT) | (1L << LINE_COMMENT) | (1L << SYMBOLS) | (1L << SINGLE_QUOTE) | (1L << STRING) | (1L << ENDNOTE))) != 0)) {
						{
						{
						State = 92;
						_la = TokenStream.LA(1);
						if ( _la <= 0 || ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__4) | (1L << LINE_ENDER))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						State = 97;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 98;
					Match(T__4);
					}
				}

				State = 101;
				Match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transition_event_guard_codeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rest_of_lineContext rest_of_line() {
			return GetRuleContext<Rest_of_lineContext>(0);
		}
		public Transition_event_guard_codeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transition_event_guard_code; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.EnterTransition_event_guard_code(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.ExitTransition_event_guard_code(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLVisitor<TResult> typedVisitor = visitor as IPlantUMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransition_event_guard_code(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transition_event_guard_codeContext transition_event_guard_code() {
		Transition_event_guard_codeContext _localctx = new Transition_event_guard_codeContext(Context, State);
		EnterRule(_localctx, 16, RULE_transition_event_guard_code);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			rest_of_line();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VertexContext[] vertex() {
			return GetRuleContexts<VertexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VertexContext vertex(int i) {
			return GetRuleContext<VertexContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OhsContext[] ohs() {
			return GetRuleContexts<OhsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OhsContext ohs(int i) {
			return GetRuleContext<OhsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EdgeContext edge() {
			return GetRuleContext<EdgeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Transition_event_guard_codeContext transition_event_guard_code() {
			return GetRuleContext<Transition_event_guard_codeContext>(0);
		}
		public TransitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.EnterTransition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.ExitTransition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLVisitor<TResult> typedVisitor = visitor as IPlantUMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransitionContext transition() {
		TransitionContext _localctx = new TransitionContext(Context, State);
		EnterRule(_localctx, 18, RULE_transition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			vertex();
			State = 107;
			ohs();
			State = 108;
			edge();
			State = 109;
			ohs();
			State = 110;
			vertex();
			State = 116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 111;
				ohs();
				State = 112;
				Match(T__7);
				State = 113;
				ohs();
				State = 114;
				transition_event_guard_code();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class State_child_statesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Optional_any_spaceContext optional_any_space() {
			return GetRuleContext<Optional_any_spaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Diagram_elementContext[] diagram_element() {
			return GetRuleContexts<Diagram_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Diagram_elementContext diagram_element(int i) {
			return GetRuleContext<Diagram_elementContext>(i);
		}
		public State_child_statesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_state_child_states; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.EnterState_child_states(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.ExitState_child_states(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLVisitor<TResult> typedVisitor = visitor as IPlantUMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitState_child_states(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public State_child_statesContext state_child_states() {
		State_child_statesContext _localctx = new State_child_statesContext(Context, State);
		EnterRule(_localctx, 20, RULE_state_child_states);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(T__8);
			State = 122;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 119;
					diagram_element();
					}
					} 
				}
				State = 124;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			State = 125;
			optional_any_space();
			State = 126;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StereotypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StereotypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stereotype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.EnterStereotype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.ExitStereotype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLVisitor<TResult> typedVisitor = visitor as IPlantUMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStereotype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StereotypeContext stereotype() {
		StereotypeContext _localctx = new StereotypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_stereotype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			Match(T__10);
			State = 129;
			identifier();
			State = 130;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class State_explicitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OhsContext[] ohs() {
			return GetRuleContexts<OhsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OhsContext ohs(int i) {
			return GetRuleContext<OhsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HWS() { return GetTokens(PlantUMLParser.HWS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HWS(int i) {
			return GetToken(PlantUMLParser.HWS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(PlantUMLParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StereotypeContext stereotype() {
			return GetRuleContext<StereotypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public State_child_statesContext state_child_states() {
			return GetRuleContext<State_child_statesContext>(0);
		}
		public State_explicitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_state_explicit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.EnterState_explicit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.ExitState_explicit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLVisitor<TResult> typedVisitor = visitor as IPlantUMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitState_explicit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public State_explicitContext state_explicit() {
		State_explicitContext _localctx = new State_explicitContext(Context, State);
		EnterRule(_localctx, 24, RULE_state_explicit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			_la = TokenStream.LA(1);
			if ( !(_la==T__12 || _la==T__13) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 133;
				Match(HWS);
				}
				}
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==HWS );
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 138;
				Match(STRING);
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 139;
					Match(HWS);
					}
					}
					State = 142;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==HWS );
				State = 144;
				Match(T__14);
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 145;
					Match(HWS);
					}
					}
					State = 148;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==HWS );
				}
			}

			State = 152;
			identifier();
			State = 156;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 153;
				ohs();
				State = 154;
				stereotype();
				}
				break;
			}
			State = 158;
			ohs();
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 159;
				state_child_states();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rest_of_lineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINE_ENDER() { return GetTokens(PlantUMLParser.LINE_ENDER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_ENDER(int i) {
			return GetToken(PlantUMLParser.LINE_ENDER, i);
		}
		public Rest_of_lineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rest_of_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.EnterRest_of_line(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.ExitRest_of_line(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLVisitor<TResult> typedVisitor = visitor as IPlantUMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRest_of_line(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rest_of_lineContext rest_of_line() {
		Rest_of_lineContext _localctx = new Rest_of_lineContext(Context, State);
		EnterRule(_localctx, 26, RULE_rest_of_line);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 162;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==LINE_ENDER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 167;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class State_contentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OhsContext[] ohs() {
			return GetRuleContexts<OhsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OhsContext ohs(int i) {
			return GetRuleContext<OhsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rest_of_lineContext rest_of_line() {
			return GetRuleContext<Rest_of_lineContext>(0);
		}
		public State_contentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_state_contents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.EnterState_contents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.ExitState_contents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLVisitor<TResult> typedVisitor = visitor as IPlantUMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitState_contents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public State_contentsContext state_contents() {
		State_contentsContext _localctx = new State_contentsContext(Context, State);
		EnterRule(_localctx, 28, RULE_state_contents);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			identifier();
			State = 169;
			ohs();
			State = 170;
			Match(T__7);
			State = 171;
			ohs();
			State = 172;
			rest_of_line();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IgnoreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HWS() { return GetTokens(PlantUMLParser.HWS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HWS(int i) {
			return GetToken(PlantUMLParser.HWS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rest_of_lineContext rest_of_line() {
			return GetRuleContext<Rest_of_lineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Optional_any_spaceContext optional_any_space() {
			return GetRuleContext<Optional_any_spaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OhsContext[] ohs() {
			return GetRuleContexts<OhsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OhsContext ohs(int i) {
			return GetRuleContext<OhsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINE_ENDER() { return GetTokens(PlantUMLParser.LINE_ENDER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_ENDER(int i) {
			return GetToken(PlantUMLParser.LINE_ENDER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StereotypeContext[] stereotype() {
			return GetRuleContexts<StereotypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StereotypeContext stereotype(int i) {
			return GetRuleContext<StereotypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(PlantUMLParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(PlantUMLParser.DIGIT, i);
		}
		public IgnoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ignore; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.EnterIgnore(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.ExitIgnore(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLVisitor<TResult> typedVisitor = visitor as IPlantUMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIgnore(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IgnoreContext ignore() {
		IgnoreContext _localctx = new IgnoreContext(Context, State);
		EnterRule(_localctx, 30, RULE_ignore);
		int _la;
		try {
			int _alt;
			State = 226;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 174;
				Match(T__15);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 175;
				Match(T__16);
				State = 176;
				Match(HWS);
				State = 177;
				rest_of_line();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 178;
				Match(T__17);
				State = 179;
				Match(HWS);
				State = 180;
				rest_of_line();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 181;
				Match(T__18);
				State = 182;
				Match(HWS);
				State = 183;
				rest_of_line();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 184;
				Match(T__19);
				State = 185;
				Match(HWS);
				State = 186;
				rest_of_line();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 187;
				Match(T__20);
				State = 188;
				Match(HWS);
				State = 189;
				identifier();
				State = 190;
				optional_any_space();
				State = 191;
				Match(T__8);
				State = 192;
				ohs();
				State = 193;
				Match(LINE_ENDER);
				State = 217;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 194;
						ohs();
						State = 211;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__22) | (1L << T__23) | (1L << IDENTIFIER))) != 0)) {
							{
							State = 195;
							identifier();
							State = 197;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==T__10) {
								{
								State = 196;
								stereotype();
								}
							}

							State = 200;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							do {
								{
								{
								State = 199;
								Match(HWS);
								}
								}
								State = 202;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							} while ( _la==HWS );
							State = 207;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							do {
								{
								State = 207;
								ErrorHandler.Sync(this);
								switch (TokenStream.LA(1)) {
								case T__12:
								case T__13:
								case T__14:
								case T__16:
								case T__17:
								case T__18:
								case T__19:
								case T__20:
								case T__22:
								case T__23:
								case IDENTIFIER:
									{
									State = 204;
									identifier();
									}
									break;
								case DIGIT:
									{
									State = 205;
									Match(DIGIT);
									}
									break;
								case T__21:
									{
									State = 206;
									Match(T__21);
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								State = 209;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << IDENTIFIER) | (1L << DIGIT))) != 0) );
							}
						}

						State = 213;
						Match(LINE_ENDER);
						}
						} 
					}
					State = 219;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				}
				State = 220;
				ohs();
				State = 221;
				Match(T__9);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 223;
				Match(T__20);
				State = 224;
				Match(HWS);
				State = 225;
				rest_of_line();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Diagram_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public State_contentsContext state_contents() {
			return GetRuleContext<State_contentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransitionContext transition() {
			return GetRuleContext<TransitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public State_explicitContext state_explicit() {
			return GetRuleContext<State_explicitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoteContext note() {
			return GetRuleContext<NoteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IgnoreContext ignore() {
			return GetRuleContext<IgnoreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Line_ending_owsContext[] line_ending_ows() {
			return GetRuleContexts<Line_ending_owsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Line_ending_owsContext line_ending_ows(int i) {
			return GetRuleContext<Line_ending_owsContext>(i);
		}
		public Diagram_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_diagram_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.EnterDiagram_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.ExitDiagram_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLVisitor<TResult> typedVisitor = visitor as IPlantUMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiagram_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Diagram_elementContext diagram_element() {
		Diagram_elementContext _localctx = new Diagram_elementContext(Context, State);
		EnterRule(_localctx, 32, RULE_diagram_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 228;
				line_ending_ows();
				}
				}
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==HWS || _la==LINE_ENDER );
			State = 238;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 233;
				state_contents();
				}
				break;
			case 2:
				{
				State = 234;
				transition();
				}
				break;
			case 3:
				{
				State = 235;
				state_explicit();
				}
				break;
			case 4:
				{
				State = 236;
				note();
				}
				break;
			case 5:
				{
				State = 237;
				ignore();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Note_shortContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OhsContext[] ohs() {
			return GetRuleContexts<OhsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OhsContext ohs(int i) {
			return GetRuleContext<OhsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rest_of_lineContext rest_of_line() {
			return GetRuleContext<Rest_of_lineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HWS() { return GetTokens(PlantUMLParser.HWS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HWS(int i) {
			return GetToken(PlantUMLParser.HWS, i);
		}
		public Note_shortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_note_short; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.EnterNote_short(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.ExitNote_short(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLVisitor<TResult> typedVisitor = visitor as IPlantUMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNote_short(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Note_shortContext note_short() {
		Note_shortContext _localctx = new Note_shortContext(Context, State);
		EnterRule(_localctx, 34, RULE_note_short);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			Match(T__22);
			State = 247;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 242;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 241;
						Match(HWS);
						}
						}
						State = 244;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==HWS );
					State = 246;
					identifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 249;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 251;
			ohs();
			State = 252;
			Match(T__7);
			State = 253;
			ohs();
			State = 254;
			rest_of_line();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Note_multiline_contents_lineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINE_ENDER() { return GetTokens(PlantUMLParser.LINE_ENDER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_ENDER(int i) {
			return GetToken(PlantUMLParser.LINE_ENDER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENDNOTE() { return GetTokens(PlantUMLParser.ENDNOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDNOTE(int i) {
			return GetToken(PlantUMLParser.ENDNOTE, i);
		}
		public Note_multiline_contents_lineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_note_multiline_contents_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.EnterNote_multiline_contents_line(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.ExitNote_multiline_contents_line(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLVisitor<TResult> typedVisitor = visitor as IPlantUMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNote_multiline_contents_line(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Note_multiline_contents_lineContext note_multiline_contents_line() {
		Note_multiline_contents_lineContext _localctx = new Note_multiline_contents_lineContext(Context, State);
		EnterRule(_localctx, 36, RULE_note_multiline_contents_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			Match(LINE_ENDER);
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << START_UML) | (1L << END_UML) | (1L << HWS) | (1L << IDENTIFIER) | (1L << DIGIT) | (1L << BLOCK_COMMENT) | (1L << LINE_COMMENT) | (1L << SYMBOLS) | (1L << SINGLE_QUOTE) | (1L << STRING))) != 0)) {
				{
				{
				State = 257;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==LINE_ENDER || _la==ENDNOTE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Note_multilineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OhsContext ohs() {
			return GetRuleContext<OhsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDNOTE() { return GetToken(PlantUMLParser.ENDNOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HWS() { return GetTokens(PlantUMLParser.HWS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HWS(int i) {
			return GetToken(PlantUMLParser.HWS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Note_multiline_contents_lineContext[] note_multiline_contents_line() {
			return GetRuleContexts<Note_multiline_contents_lineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Note_multiline_contents_lineContext note_multiline_contents_line(int i) {
			return GetRuleContext<Note_multiline_contents_lineContext>(i);
		}
		public Note_multilineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_note_multiline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.EnterNote_multiline(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.ExitNote_multiline(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLVisitor<TResult> typedVisitor = visitor as IPlantUMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNote_multiline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Note_multilineContext note_multiline() {
		Note_multilineContext _localctx = new Note_multilineContext(Context, State);
		EnterRule(_localctx, 38, RULE_note_multiline);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			Match(T__22);
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 264;
				Match(HWS);
				}
				}
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==HWS );
			State = 269;
			identifier();
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 270;
				Match(HWS);
				}
				}
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==HWS );
			State = 275;
			identifier();
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 276;
				Match(HWS);
				}
				}
				State = 279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==HWS );
			State = 281;
			identifier();
			State = 282;
			ohs();
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LINE_ENDER) {
				{
				{
				State = 283;
				note_multiline_contents_line();
				}
				}
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 289;
			Match(ENDNOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Note_floatingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(PlantUMLParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rest_of_lineContext rest_of_line() {
			return GetRuleContext<Rest_of_lineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HWS() { return GetTokens(PlantUMLParser.HWS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HWS(int i) {
			return GetToken(PlantUMLParser.HWS, i);
		}
		public Note_floatingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_note_floating; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.EnterNote_floating(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.ExitNote_floating(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLVisitor<TResult> typedVisitor = visitor as IPlantUMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNote_floating(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Note_floatingContext note_floating() {
		Note_floatingContext _localctx = new Note_floatingContext(Context, State);
		EnterRule(_localctx, 40, RULE_note_floating);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			Match(T__22);
			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 292;
				Match(HWS);
				}
				}
				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==HWS );
			State = 297;
			Match(STRING);
			State = 298;
			rest_of_line();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Note_shortContext note_short() {
			return GetRuleContext<Note_shortContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Note_multilineContext note_multiline() {
			return GetRuleContext<Note_multilineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Note_floatingContext note_floating() {
			return GetRuleContext<Note_floatingContext>(0);
		}
		public NoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_note; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.EnterNote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.ExitNote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLVisitor<TResult> typedVisitor = visitor as IPlantUMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoteContext note() {
		NoteContext _localctx = new NoteContext(Context, State);
		EnterRule(_localctx, 42, RULE_note);
		try {
			State = 303;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 300;
				note_short();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 301;
				note_multiline();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 302;
				note_floating();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartumlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_UML() { return GetToken(PlantUMLParser.START_UML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HWS() { return GetTokens(PlantUMLParser.HWS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HWS(int i) {
			return GetToken(PlantUMLParser.HWS, i);
		}
		public StartumlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startuml; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.EnterStartuml(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.ExitStartuml(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLVisitor<TResult> typedVisitor = visitor as IPlantUMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartuml(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartumlContext startuml() {
		StartumlContext _localctx = new StartumlContext(Context, State);
		EnterRule(_localctx, 44, RULE_startuml);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			Match(START_UML);
			State = 312;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 306;
					Match(HWS);
					}
					}
					State = 309;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==HWS );
				State = 311;
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiagramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Optional_any_spaceContext[] optional_any_space() {
			return GetRuleContexts<Optional_any_spaceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Optional_any_spaceContext optional_any_space(int i) {
			return GetRuleContext<Optional_any_spaceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StartumlContext startuml() {
			return GetRuleContext<StartumlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OhsContext ohs() {
			return GetRuleContext<OhsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_UML() { return GetToken(PlantUMLParser.END_UML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PlantUMLParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Diagram_elementContext[] diagram_element() {
			return GetRuleContexts<Diagram_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Diagram_elementContext diagram_element(int i) {
			return GetRuleContext<Diagram_elementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Line_ending_owsContext[] line_ending_ows() {
			return GetRuleContexts<Line_ending_owsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Line_ending_owsContext line_ending_ows(int i) {
			return GetRuleContext<Line_ending_owsContext>(i);
		}
		public DiagramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_diagram; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.EnterDiagram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.ExitDiagram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLVisitor<TResult> typedVisitor = visitor as IPlantUMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiagram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiagramContext diagram() {
		DiagramContext _localctx = new DiagramContext(Context, State);
		EnterRule(_localctx, 46, RULE_diagram);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			optional_any_space();
			State = 315;
			startuml();
			State = 316;
			ohs();
			State = 320;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 317;
					diagram_element();
					}
					} 
				}
				State = 322;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 323;
				line_ending_ows();
				}
				}
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==HWS || _la==LINE_ENDER );
			State = 328;
			Match(END_UML);
			State = 329;
			optional_any_space();
			State = 330;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PlantUMLParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLListener typedListener = listener as IPlantUMLListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLVisitor<TResult> typedVisitor = visitor as IPlantUMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 48, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__22) | (1L << T__23) | (1L << IDENTIFIER))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '&', '\x151', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\a', '\x3', 
		':', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '=', '\v', '\x3', '\x3', 
		'\x4', '\a', '\x4', '@', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x43', 
		'\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'M', '\n', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', 'U', '\n', '\b', '\x5', '\b', 'W', '\n', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\\', '\n', '\t', 
		'\x3', '\t', '\x3', '\t', '\a', '\t', '`', '\n', '\t', '\f', '\t', '\xE', 
		'\t', '\x63', '\v', '\t', '\x3', '\t', '\x5', '\t', '\x66', '\n', '\t', 
		'\x3', '\t', '\x5', '\t', 'i', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 'w', 
		'\n', '\v', '\x3', '\f', '\x3', '\f', '\a', '\f', '{', '\n', '\f', '\f', 
		'\f', '\xE', '\f', '~', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x6', '\xE', '\x89', '\n', '\xE', '\r', '\xE', '\xE', '\xE', '\x8A', 
		'\x3', '\xE', '\x3', '\xE', '\x6', '\xE', '\x8F', '\n', '\xE', '\r', '\xE', 
		'\xE', '\xE', '\x90', '\x3', '\xE', '\x3', '\xE', '\x6', '\xE', '\x95', 
		'\n', '\xE', '\r', '\xE', '\xE', '\xE', '\x96', '\x5', '\xE', '\x99', 
		'\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\x9F', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\xA3', '\n', '\xE', '\x3', '\xF', '\a', '\xF', '\xA6', '\n', '\xF', '\f', 
		'\xF', '\xE', '\xF', '\xA9', '\v', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xC8', '\n', '\x11', '\x3', 
		'\x11', '\x6', '\x11', '\xCB', '\n', '\x11', '\r', '\x11', '\xE', '\x11', 
		'\xCC', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x6', '\x11', '\xD2', 
		'\n', '\x11', '\r', '\x11', '\xE', '\x11', '\xD3', '\x5', '\x11', '\xD6', 
		'\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\xDA', '\n', 
		'\x11', '\f', '\x11', '\xE', '\x11', '\xDD', '\v', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\xE5', '\n', '\x11', '\x3', '\x12', '\x6', '\x12', '\xE8', 
		'\n', '\x12', '\r', '\x12', '\xE', '\x12', '\xE9', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xF1', 
		'\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x6', '\x13', '\xF5', '\n', 
		'\x13', '\r', '\x13', '\xE', '\x13', '\xF6', '\x3', '\x13', '\x6', '\x13', 
		'\xFA', '\n', '\x13', '\r', '\x13', '\xE', '\x13', '\xFB', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\a', '\x14', '\x105', '\n', '\x14', '\f', '\x14', '\xE', 
		'\x14', '\x108', '\v', '\x14', '\x3', '\x15', '\x3', '\x15', '\x6', '\x15', 
		'\x10C', '\n', '\x15', '\r', '\x15', '\xE', '\x15', '\x10D', '\x3', '\x15', 
		'\x3', '\x15', '\x6', '\x15', '\x112', '\n', '\x15', '\r', '\x15', '\xE', 
		'\x15', '\x113', '\x3', '\x15', '\x3', '\x15', '\x6', '\x15', '\x118', 
		'\n', '\x15', '\r', '\x15', '\xE', '\x15', '\x119', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\a', '\x15', '\x11F', '\n', '\x15', '\f', '\x15', 
		'\xE', '\x15', '\x122', '\v', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x6', '\x16', '\x128', '\n', '\x16', '\r', '\x16', 
		'\xE', '\x16', '\x129', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x132', '\n', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x6', '\x18', '\x136', '\n', '\x18', '\r', 
		'\x18', '\xE', '\x18', '\x137', '\x3', '\x18', '\x5', '\x18', '\x13B', 
		'\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\a', '\x19', '\x141', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x144', 
		'\v', '\x19', '\x3', '\x19', '\x6', '\x19', '\x147', '\n', '\x19', '\r', 
		'\x19', '\xE', '\x19', '\x148', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x2', '\x2', 
		'\x1B', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x2', '\t', '\x3', '\x2', '\x1D', '\x1E', 
		'\x3', '\x2', '\x5', '\x6', '\x5', '\x2', '\x4', '\x4', '\a', '\a', '\x1E', 
		'\x1E', '\x3', '\x2', '\xF', '\x10', '\x3', '\x2', '\x1E', '\x1E', '\x4', 
		'\x2', '\x1E', '\x1E', '&', '&', '\x6', '\x2', '\xF', '\x11', '\x13', 
		'\x17', '\x19', '\x1A', '\x1F', '\x1F', '\x2', '\x16A', '\x2', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\x4', ';', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\b', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\x46', '\x3', '\x2', '\x2', '\x2', '\f', 'J', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'V', '\x3', '\x2', '\x2', '\x2', '\x10', 'h', '\x3', 
		'\x2', '\x2', '\x2', '\x12', 'j', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'l', '\x3', '\x2', '\x2', '\x2', '\x16', 'x', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x82', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x86', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xAA', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\xE4', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\xE7', '\x3', '\x2', '\x2', '\x2', '$', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '&', '\x102', '\x3', '\x2', '\x2', '\x2', '(', '\x109', '\x3', 
		'\x2', '\x2', '\x2', '*', '\x125', '\x3', '\x2', '\x2', '\x2', ',', '\x131', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x133', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x32', '\x14E', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x35', '\x5', '\x4', '\x3', '\x2', '\x35', '\x36', 
		'\a', '\x1E', '\x2', '\x2', '\x36', '\x37', '\x5', '\x4', '\x3', '\x2', 
		'\x37', '\x3', '\x3', '\x2', '\x2', '\x2', '\x38', ':', '\t', '\x2', '\x2', 
		'\x2', '\x39', '\x38', '\x3', '\x2', '\x2', '\x2', ':', '=', '\x3', '\x2', 
		'\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', 
		'\x2', '\x2', '\x2', '<', '\x5', '\x3', '\x2', '\x2', '\x2', '=', ';', 
		'\x3', '\x2', '\x2', '\x2', '>', '@', '\a', '\x1D', '\x2', '\x2', '?', 
		'>', '\x3', '\x2', '\x2', '\x2', '@', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\a', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\a', '\x3', '\x2', '\x2', 
		'\x45', '\t', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\a', '\x4', '\x2', 
		'\x2', 'G', 'H', '\t', '\x3', '\x2', '\x2', 'H', 'I', '\a', '\a', '\x2', 
		'\x2', 'I', '\v', '\x3', '\x2', '\x2', '\x2', 'J', 'L', '\x5', '\x32', 
		'\x1A', '\x2', 'K', 'M', '\x5', '\n', '\x6', '\x2', 'L', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', '\r', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'W', '\x5', '\b', '\x5', '\x2', 'O', 'W', '\x5', 
		'\n', '\x6', '\x2', 'P', 'T', '\x5', '\f', '\a', '\x2', 'Q', 'R', '\x5', 
		'\x6', '\x4', '\x2', 'R', 'S', '\x5', '\x18', '\r', '\x2', 'S', 'U', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'Q', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'W', '\x3', '\x2', '\x2', '\x2', 'V', 'N', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'O', '\x3', '\x2', '\x2', '\x2', 'V', 'P', '\x3', 
		'\x2', '\x2', '\x2', 'W', '\xF', '\x3', '\x2', '\x2', '\x2', 'X', 'i', 
		'\a', '\b', '\x2', '\x2', 'Y', '[', '\a', '\t', '\x2', '\x2', 'Z', '\\', 
		'\a', '\x1F', '\x2', '\x2', '[', 'Z', '\x3', '\x2', '\x2', '\x2', '[', 
		'\\', '\x3', '\x2', '\x2', '\x2', '\\', '\x65', '\x3', '\x2', '\x2', '\x2', 
		']', '\x61', '\a', '\x4', '\x2', '\x2', '^', '`', '\n', '\x4', '\x2', 
		'\x2', '_', '^', '\x3', '\x2', '\x2', '\x2', '`', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x64', '\x66', '\a', '\a', 
		'\x2', '\x2', '\x65', ']', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', 
		'\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x3', '\x2', '\x2', '\x2', 'g', 
		'i', '\a', '\b', '\x2', '\x2', 'h', 'X', '\x3', '\x2', '\x2', '\x2', 'h', 
		'Y', '\x3', '\x2', '\x2', '\x2', 'i', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\x5', '\x1C', '\xF', '\x2', 'k', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'm', '\x5', '\xE', '\b', '\x2', 'm', 'n', '\x5', '\x6', '\x4', 
		'\x2', 'n', 'o', '\x5', '\x10', '\t', '\x2', 'o', 'p', '\x5', '\x6', '\x4', 
		'\x2', 'p', 'v', '\x5', '\xE', '\b', '\x2', 'q', 'r', '\x5', '\x6', '\x4', 
		'\x2', 'r', 's', '\a', '\n', '\x2', '\x2', 's', 't', '\x5', '\x6', '\x4', 
		'\x2', 't', 'u', '\x5', '\x12', '\n', '\x2', 'u', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'q', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'w', '\x15', '\x3', '\x2', '\x2', '\x2', 'x', '|', '\a', '\v', 
		'\x2', '\x2', 'y', '{', '\x5', '\"', '\x12', '\x2', 'z', 'y', '\x3', '\x2', 
		'\x2', '\x2', '{', '~', '\x3', '\x2', '\x2', '\x2', '|', 'z', '\x3', '\x2', 
		'\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', '}', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', 
		'\x5', '\x4', '\x3', '\x2', '\x80', '\x81', '\a', '\f', '\x2', '\x2', 
		'\x81', '\x17', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\a', '\r', 
		'\x2', '\x2', '\x83', '\x84', '\x5', '\x32', '\x1A', '\x2', '\x84', '\x85', 
		'\a', '\xE', '\x2', '\x2', '\x85', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x88', '\t', '\x5', '\x2', '\x2', '\x87', '\x89', '\a', '\x1D', 
		'\x2', '\x2', '\x88', '\x87', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', 
		'\x3', '\x2', '\x2', '\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x98', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x8E', '\a', '%', '\x2', '\x2', '\x8D', '\x8F', 
		'\a', '\x1D', '\x2', '\x2', '\x8E', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x8F', '\x90', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8E', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x91', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x94', '\a', '\x11', '\x2', '\x2', 
		'\x93', '\x95', '\a', '\x1D', '\x2', '\x2', '\x94', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '\x95', '\x96', '\x3', '\x2', '\x2', '\x2', '\x96', '\x94', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x97', '\x99', '\x3', '\x2', '\x2', '\x2', '\x98', '\x8C', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x9E', '\x5', '\x32', '\x1A', '\x2', 
		'\x9B', '\x9C', '\x5', '\x6', '\x4', '\x2', '\x9C', '\x9D', '\x5', '\x18', 
		'\r', '\x2', '\x9D', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', '\x2', 
		'\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA2', '\x5', '\x6', 
		'\x4', '\x2', '\xA1', '\xA3', '\x5', '\x16', '\f', '\x2', '\xA2', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x3', '\x2', '\x2', '\x2', 
		'\xA3', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA6', '\n', '\x6', 
		'\x2', '\x2', '\xA5', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA9', 
		'\x3', '\x2', '\x2', '\x2', '\xA7', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\xA7', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\xA9', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', 
		'\x5', '\x32', '\x1A', '\x2', '\xAB', '\xAC', '\x5', '\x6', '\x4', '\x2', 
		'\xAC', '\xAD', '\a', '\n', '\x2', '\x2', '\xAD', '\xAE', '\x5', '\x6', 
		'\x4', '\x2', '\xAE', '\xAF', '\x5', '\x1C', '\xF', '\x2', '\xAF', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\xE5', '\a', '\x12', '\x2', '\x2', 
		'\xB1', '\xB2', '\a', '\x13', '\x2', '\x2', '\xB2', '\xB3', '\a', '\x1D', 
		'\x2', '\x2', '\xB3', '\xE5', '\x5', '\x1C', '\xF', '\x2', '\xB4', '\xB5', 
		'\a', '\x14', '\x2', '\x2', '\xB5', '\xB6', '\a', '\x1D', '\x2', '\x2', 
		'\xB6', '\xE5', '\x5', '\x1C', '\xF', '\x2', '\xB7', '\xB8', '\a', '\x15', 
		'\x2', '\x2', '\xB8', '\xB9', '\a', '\x1D', '\x2', '\x2', '\xB9', '\xE5', 
		'\x5', '\x1C', '\xF', '\x2', '\xBA', '\xBB', '\a', '\x16', '\x2', '\x2', 
		'\xBB', '\xBC', '\a', '\x1D', '\x2', '\x2', '\xBC', '\xE5', '\x5', '\x1C', 
		'\xF', '\x2', '\xBD', '\xBE', '\a', '\x17', '\x2', '\x2', '\xBE', '\xBF', 
		'\a', '\x1D', '\x2', '\x2', '\xBF', '\xC0', '\x5', '\x32', '\x1A', '\x2', 
		'\xC0', '\xC1', '\x5', '\x4', '\x3', '\x2', '\xC1', '\xC2', '\a', '\v', 
		'\x2', '\x2', '\xC2', '\xC3', '\x5', '\x6', '\x4', '\x2', '\xC3', '\xDB', 
		'\a', '\x1E', '\x2', '\x2', '\xC4', '\xD5', '\x5', '\x6', '\x4', '\x2', 
		'\xC5', '\xC7', '\x5', '\x32', '\x1A', '\x2', '\xC6', '\xC8', '\x5', '\x18', 
		'\r', '\x2', '\xC7', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', 
		'\x3', '\x2', '\x2', '\x2', '\xC8', '\xCA', '\x3', '\x2', '\x2', '\x2', 
		'\xC9', '\xCB', '\a', '\x1D', '\x2', '\x2', '\xCA', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\x3', '\x2', '\x2', '\x2', 
		'\xCD', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xD2', '\x5', '\x32', 
		'\x1A', '\x2', '\xCF', '\xD2', '\a', ' ', '\x2', '\x2', '\xD0', '\xD2', 
		'\a', '\x18', '\x2', '\x2', '\xD1', '\xCE', '\x3', '\x2', '\x2', '\x2', 
		'\xD1', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD0', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\x3', '\x2', '\x2', '\x2', 
		'\xD4', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xC5', '\x3', '\x2', 
		'\x2', '\x2', '\xD5', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', 
		'\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\a', '\x1E', '\x2', '\x2', 
		'\xD8', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xC4', '\x3', '\x2', 
		'\x2', '\x2', '\xDA', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', 
		'\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', 
		'\xDC', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDB', '\x3', '\x2', 
		'\x2', '\x2', '\xDE', '\xDF', '\x5', '\x6', '\x4', '\x2', '\xDF', '\xE0', 
		'\a', '\f', '\x2', '\x2', '\xE0', '\xE5', '\x3', '\x2', '\x2', '\x2', 
		'\xE1', '\xE2', '\a', '\x17', '\x2', '\x2', '\xE2', '\xE3', '\a', '\x1D', 
		'\x2', '\x2', '\xE3', '\xE5', '\x5', '\x1C', '\xF', '\x2', '\xE4', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '\xE4', '\xB1', '\x3', '\x2', '\x2', '\x2', 
		'\xE4', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xB7', '\x3', '\x2', 
		'\x2', '\x2', '\xE4', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xBD', 
		'\x3', '\x2', '\x2', '\x2', '\xE4', '\xE1', '\x3', '\x2', '\x2', '\x2', 
		'\xE5', '!', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE8', '\x5', '\x2', 
		'\x2', '\x2', '\xE7', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', 
		'\x3', '\x2', '\x2', '\x2', '\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\xE9', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xF0', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\xF1', '\x5', '\x1E', '\x10', '\x2', '\xEC', '\xF1', 
		'\x5', '\x14', '\v', '\x2', '\xED', '\xF1', '\x5', '\x1A', '\xE', '\x2', 
		'\xEE', '\xF1', '\x5', ',', '\x17', '\x2', '\xEF', '\xF1', '\x5', ' ', 
		'\x11', '\x2', '\xF0', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xEC', 
		'\x3', '\x2', '\x2', '\x2', '\xF0', '\xED', '\x3', '\x2', '\x2', '\x2', 
		'\xF0', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xEF', '\x3', '\x2', 
		'\x2', '\x2', '\xF1', '#', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF9', 
		'\a', '\x19', '\x2', '\x2', '\xF3', '\xF5', '\a', '\x1D', '\x2', '\x2', 
		'\xF4', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x3', '\x2', 
		'\x2', '\x2', '\xF6', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', 
		'\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\x3', '\x2', '\x2', '\x2', 
		'\xF8', '\xFA', '\x5', '\x32', '\x1A', '\x2', '\xF9', '\xF4', '\x3', '\x2', 
		'\x2', '\x2', '\xFA', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xF9', 
		'\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\x3', '\x2', '\x2', '\x2', 
		'\xFC', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFE', '\x5', '\x6', 
		'\x4', '\x2', '\xFE', '\xFF', '\a', '\n', '\x2', '\x2', '\xFF', '\x100', 
		'\x5', '\x6', '\x4', '\x2', '\x100', '\x101', '\x5', '\x1C', '\xF', '\x2', 
		'\x101', '%', '\x3', '\x2', '\x2', '\x2', '\x102', '\x106', '\a', '\x1E', 
		'\x2', '\x2', '\x103', '\x105', '\n', '\a', '\x2', '\x2', '\x104', '\x103', 
		'\x3', '\x2', '\x2', '\x2', '\x105', '\x108', '\x3', '\x2', '\x2', '\x2', 
		'\x106', '\x104', '\x3', '\x2', '\x2', '\x2', '\x106', '\x107', '\x3', 
		'\x2', '\x2', '\x2', '\x107', '\'', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\x106', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10B', '\a', '\x19', '\x2', 
		'\x2', '\x10A', '\x10C', '\a', '\x1D', '\x2', '\x2', '\x10B', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '\x10C', '\x10D', '\x3', '\x2', '\x2', '\x2', 
		'\x10D', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\x3', 
		'\x2', '\x2', '\x2', '\x10E', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10F', 
		'\x111', '\x5', '\x32', '\x1A', '\x2', '\x110', '\x112', '\a', '\x1D', 
		'\x2', '\x2', '\x111', '\x110', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x113', '\x111', '\x3', '\x2', '\x2', '\x2', 
		'\x113', '\x114', '\x3', '\x2', '\x2', '\x2', '\x114', '\x115', '\x3', 
		'\x2', '\x2', '\x2', '\x115', '\x117', '\x5', '\x32', '\x1A', '\x2', '\x116', 
		'\x118', '\a', '\x1D', '\x2', '\x2', '\x117', '\x116', '\x3', '\x2', '\x2', 
		'\x2', '\x118', '\x119', '\x3', '\x2', '\x2', '\x2', '\x119', '\x117', 
		'\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x11A', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\x5', 
		'\x32', '\x1A', '\x2', '\x11C', '\x120', '\x5', '\x6', '\x4', '\x2', '\x11D', 
		'\x11F', '\x5', '&', '\x14', '\x2', '\x11E', '\x11D', '\x3', '\x2', '\x2', 
		'\x2', '\x11F', '\x122', '\x3', '\x2', '\x2', '\x2', '\x120', '\x11E', 
		'\x3', '\x2', '\x2', '\x2', '\x120', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'\x121', '\x123', '\x3', '\x2', '\x2', '\x2', '\x122', '\x120', '\x3', 
		'\x2', '\x2', '\x2', '\x123', '\x124', '\a', '&', '\x2', '\x2', '\x124', 
		')', '\x3', '\x2', '\x2', '\x2', '\x125', '\x127', '\a', '\x19', '\x2', 
		'\x2', '\x126', '\x128', '\a', '\x1D', '\x2', '\x2', '\x127', '\x126', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x129', '\x127', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\x3', 
		'\x2', '\x2', '\x2', '\x12A', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12B', 
		'\x12C', '\a', '%', '\x2', '\x2', '\x12C', '\x12D', '\x5', '\x1C', '\xF', 
		'\x2', '\x12D', '+', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x132', '\x5', 
		'$', '\x13', '\x2', '\x12F', '\x132', '\x5', '(', '\x15', '\x2', '\x130', 
		'\x132', '\x5', '*', '\x16', '\x2', '\x131', '\x12E', '\x3', '\x2', '\x2', 
		'\x2', '\x131', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x131', '\x130', 
		'\x3', '\x2', '\x2', '\x2', '\x132', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x133', '\x13A', '\a', '\x1B', '\x2', '\x2', '\x134', '\x136', '\a', 
		'\x1D', '\x2', '\x2', '\x135', '\x134', '\x3', '\x2', '\x2', '\x2', '\x136', 
		'\x137', '\x3', '\x2', '\x2', '\x2', '\x137', '\x135', '\x3', '\x2', '\x2', 
		'\x2', '\x137', '\x138', '\x3', '\x2', '\x2', '\x2', '\x138', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x139', '\x13B', '\x5', '\x32', '\x1A', '\x2', 
		'\x13A', '\x135', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', '\x3', 
		'\x2', '\x2', '\x2', '\x13B', '/', '\x3', '\x2', '\x2', '\x2', '\x13C', 
		'\x13D', '\x5', '\x4', '\x3', '\x2', '\x13D', '\x13E', '\x5', '.', '\x18', 
		'\x2', '\x13E', '\x142', '\x5', '\x6', '\x4', '\x2', '\x13F', '\x141', 
		'\x5', '\"', '\x12', '\x2', '\x140', '\x13F', '\x3', '\x2', '\x2', '\x2', 
		'\x141', '\x144', '\x3', '\x2', '\x2', '\x2', '\x142', '\x140', '\x3', 
		'\x2', '\x2', '\x2', '\x142', '\x143', '\x3', '\x2', '\x2', '\x2', '\x143', 
		'\x146', '\x3', '\x2', '\x2', '\x2', '\x144', '\x142', '\x3', '\x2', '\x2', 
		'\x2', '\x145', '\x147', '\x5', '\x2', '\x2', '\x2', '\x146', '\x145', 
		'\x3', '\x2', '\x2', '\x2', '\x147', '\x148', '\x3', '\x2', '\x2', '\x2', 
		'\x148', '\x146', '\x3', '\x2', '\x2', '\x2', '\x148', '\x149', '\x3', 
		'\x2', '\x2', '\x2', '\x149', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14A', 
		'\x14B', '\a', '\x1C', '\x2', '\x2', '\x14B', '\x14C', '\x5', '\x4', '\x3', 
		'\x2', '\x14C', '\x14D', '\a', '\x2', '\x2', '\x3', '\x14D', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x14E', '\x14F', '\t', '\b', '\x2', '\x2', '\x14F', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '*', ';', '\x41', 'L', 'T', 'V', '[', 
		'\x61', '\x65', 'h', 'v', '|', '\x8A', '\x90', '\x96', '\x98', '\x9E', 
		'\xA2', '\xA7', '\xC7', '\xCC', '\xD1', '\xD3', '\xD5', '\xDB', '\xE4', 
		'\xE9', '\xF0', '\xF6', '\xFB', '\x106', '\x10D', '\x113', '\x119', '\x120', 
		'\x129', '\x131', '\x137', '\x13A', '\x142', '\x148',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
