using System.Text;

namespace StateSmith.Output.Sim;

public class HtmlRenderer
{
    public static void Render(StringBuilder stringBuilder, string smName, string mocksCode, string mermaidCode, string jsCode)
    {
        // Now that we are working inside the StateSmith project, we need to restrict ourselves to dotnet 6 features.
        // We can't use """raw strings""" anymore so we do manual string interpolation below string.
        // Also, in the below string, we have to use `""` to escape double quotes. I miss raw strings already...
        string htmlTemplate = @"<!-- 
  -- This file was generated by StateSmith.
  -- It serves as an example of how to use the generated state machine in a web page.
  -- It also serves as an interactive console that you can use to validate the
  -- state machine's behavior.
  --
  -- Using {{smName}}.js generally looks like:
  --   var sm = new {{smName}}();
  --   sm.start();
  --
  -- And then using sm.dispatchEvent() to dispatch events to the state machine.
  -->
<html>
  <head>
    <style>
      body {
        display: flex;
        flex-direction: row;
      }

      .wrapper {
        height: 100vh;
        width: 100vw;
        display: flex;
      }

      .pane {
        padding: 1em;
        min-width: 200px;
      }

      .gutter {
        width: 10px;
        height: 100%;
        background: #ccc;
        position: absolute;
        top: 0;
        left: 0;
        cursor: col-resize;
      }

      .main {
        width: 100%;
        overflow: auto;
        padding: 10px;
      }

      .sidebar {
        flex: 1;
        position: relative;
        background-color: #f0f0f0;
        border-left: 1px solid #ccc;
        display: flex;
        flex-direction: column;
      }

      #buttons {
        display: flex;
        flex-direction: column;
      }

      .titlebar {
        background-color: #ddd;
        border-bottom: 1px solid #ccc;
        font-weight: bold;
        padding: 5px;
      }

      .console {
        border-collapse: collapse;
        margin-top: 10px;
        width: 100%;
      }

      .console th {
        background-color: #f0f0f0;
        border-bottom: 1px solid #ccc;
        font-weight: normal;
        padding: 5px;
        text-align: left;
      }

      .console tbody {
        display: flex;
        flex-direction: column-reverse;
      }

      .console td {
        border-bottom: 1px solid #ccc;
        padding: 5px;
      }

      .history {
        margin-top: 30px;
        overflow: scroll;    
      }

      .console tr:last-child td {
        border-bottom: none;
      }

      button {
        margin: 5px;
      }
    </style>
  </head>

  <body>
    <div class=""wrapper"">
    <div class=""pane main"">
        <pre class=""mermaid"">
{{mermaidCode}}
        </pre>
    </div>

    <div class=""pane sidebar"">
        <div id=""buttons"">
            <div class=""titlebar"">Actions</div>
        </div>

        <div class=""history"">
            <div class=""titlebar"">History</div>
            <table class=""console"">
            <thead>
                <tr>
                    <th>Time</th>
                    <th>Event</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
            </table>
        </div>

        <div class=""gutter""></div>
    </div>
    </div>

<script>
{{jsCode}}
</script>

    <script type=""module"">
        import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';
        import svgPanZoom from 'https://cdn.jsdelivr.net/npm/svg-pan-zoom@3.6.1/+esm' ;
        mermaid.initialize({ startOnLoad: false });
        await mermaid.run();

        // svg-pan-zoom doesn't like the mermaid viewbox
        document.querySelector('svg').removeAttribute('viewBox');
        document.querySelector('svg').setAttribute('width', '100%');
        document.querySelector('svg').setAttribute('height', '100%');
        document.querySelector('svg').style[""max-width""] = '';

        var panZoom = window.panZoom = svgPanZoom(document.querySelector('svg'), {
            zoomEnabled: true,
            controlIconsEnabled: true,
            fit: true,
            center: true
        });


        const leftPane = document.querySelector("".main"");
        const rightPane = document.querySelector("".sidebar"");
        const gutter = document.querySelector("".gutter"");

        function resizer(e) {          
          window.addEventListener('mousemove', mousemove);
          window.addEventListener('mouseup', mouseup);          
          let prevX = e.x;
          const leftPanel = leftPane.getBoundingClientRect();
                    
          function mousemove(e) {
            let newX = prevX - e.x;
            leftPane.style.width = leftPanel.width - newX + ""px"";
            window.panZoom.resize();
            window.panZoom.fit();
            window.panZoom.center();
          }
          
          function mouseup() {
            window.removeEventListener('mousemove', mousemove);
            window.removeEventListener('mouseup', mouseup);
            
          }                  
        }

        gutter.addEventListener('mousedown', resizer);

{{mocksCode}}

        // Convert a date to a string in the format HH:MM:SS.sss
        function formatTime(date) {
            return date.getHours().toString().padStart(2, '0') + ':' +
                date.getMinutes().toString().padStart(2, '0') + ':' +
                date.getSeconds().toString().padStart(2, '0') + '.' +
                date.getMilliseconds().toString().padStart(3, '0');
        }

        // Add a row to the history table.
        function addHistoryRow(time, event) {
            var row = document.createElement('tr');
            var timeCell = document.createElement('td');
            timeCell.innerText = formatTime(time);
            var eventCell = document.createElement('td');
            eventCell.innerText = event;
            row.appendChild(timeCell);
            row.appendChild(eventCell);
            document.querySelector('tbody').appendChild(row);
        }

        var sm = new {{smName}}();

        // prompt the user to evaluate guards manually
        sm.evaluateGuard = (guard) => {
            return confirm('Evaluate guard: ' + guard);
        }; 

        const highlightedEdges = new Set();
        function highlightEdge(edgeId) {
            var edge = document.getElementById(edgeId);
            if (edge) {
                edge.style.stroke = 'red';
                highlightedEdges.add(edge);
            }
        }

        function clearHighlightedEdges() {
            for (const edge of highlightedEdges) {
                const showOldTraversal = true;
                if (showOldTraversal) {
                    // shows that the edge was traversed. Optional, but kinda nice.
                    edge.style.stroke = 'green';
                } else {
                    edge.style.stroke = '';
                }
            }
            highlightedEdges.clear();
        }

        // The simulator uses a tracer callback to perform operations such as 
        // state highlighting and logging. You do not need this functionality
        // when using {{smName}}.js in your own applications, although you may
        // choose to implement a tracer for debugging purposes.
        sm.tracer = {
            enterState: (stateId) => {
                var name = {{smName}}.stateIdToString(stateId);
                document.querySelector('g[data-id=' + name + ']')?.classList.add('active');
                sm.tracer.log(""Entered "" + name);
            },
            exitState: (stateId) => {
                var name = {{smName}}.stateIdToString(stateId);
                document.querySelector('g[data-id=' + name + ']')?.classList.remove('active');
            },
            edgeTransition: (edgeId) => {
                highlightEdge(edgeId);
            },
            log: (message) => {
                addHistoryRow(new Date(), message);
            }
        };

        // Wire up the buttons that dispatch events for the state machine.
        for (const eventName in {{smName}}.EventId) {
            var button = document.createElement('button');
            button.id = 'button_' + eventName;
            button.innerText = eventName;
            button.addEventListener('click', () => {
                clearHighlightedEdges();
                sm.tracer.log(""Dispatched "" + eventName);
                sm.dispatchEvent({{smName}}.EventId[eventName]); 
            });
            document.getElementById('buttons').appendChild(button);
        }

        sm.start();
    </script>


  </body>
</html>";

        htmlTemplate = htmlTemplate.Replace("{{mermaidCode}}", mermaidCode);
        htmlTemplate = htmlTemplate.Replace("{{jsCode}}", jsCode);
        htmlTemplate = htmlTemplate.Replace("{{mocksCode}}", mocksCode);
        htmlTemplate = htmlTemplate.Replace("{{smName}}", smName);
        stringBuilder.AppendLine(htmlTemplate);
    }
}
