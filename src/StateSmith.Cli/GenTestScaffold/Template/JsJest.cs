using StateSmith.Cli.Create;

namespace StateSmith.Cli.GenTestScaffold.Template;

/// <summary>
/// From Mike Burton's work https://github.com/StateSmith/exp-test-gen/blob/a0b7e0d332e6a7f34d1a5dc51e09f9e580e702bc/src/LightSm.csx
/// https://github.com/StateSmith/StateSmith/issues/266
/// </summary>
public class JsJest : ITemplateGenerator
{
    public TargetLanguageId LanguageId => TargetLanguageId.JavaScript;
    public string DisplayId => "jest-1";
    public string ShortDescription => "jest and nodejs";

    public string SuggestFileName(GeneratorData data)
    {
        return $"{data.StateMachineName}.jest.test.js";
    }

    public string GenerateFileContent(GeneratorData data)
    {
        string firstStateName = data.FirstTestStateName ?? "YOUR_FIRST_STATE";

        string content = template
            .Replace("{{SmName}}", data.StateMachineName)
            .Replace("{{FirstEvent}}", data.FirstTestEventName)
            .Replace("{{FirstState}}", firstStateName);

        return content;
    }

    // this could be done nicer if we used net7 or later.
    protected const string template =
@"// This is a sample test file for the LightSm state machine.
// Generated by StateSmith.
// Feel free to make a copy and start adding your own tests.

// This sample uses npm and jest to run tests. 
//
// To setup tests:
// - install npm if you don't already have it (https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)
// - Install the jest dev dependency: `npm install --save-dev jest`
// - edit your package.json file, see package.sample.json for an example
//   (Jest needs some light setup to work with ES6 modules for 'import' and 'export')
//
// To run, type `npm test` in the terminal

import {jest} from '@jest/globals';
import { {{SmName}} } from './{{SmName}}.js';

// Mock the functions used by the state machine.
// We recommend mocking rather than importing your actual functions,
// to keep these tests purely about testing the state machine itself.
// (Your function implementations should also be tested, but in separate tests.)

// sample mocking for example `light_red()` function.
//    globalThis.light_red = jest.fn();

beforeEach(() => {
    jest.clearAllMocks();
});

// Use 'stateId' to access the current state of the state machine, eg.
// expect(sm.stateId).toBe({{SmName}}.StateId.{{FirstState}});
//
// Use 'vars' to access the variables of the state machine, eg.
// expect(sm.vars.myVar).toBe(42);
//
// Use 'dispatchEvent' to send events to the state machine, eg.
// sm.dispatchEvent({{SmName}}.EventId.{{FirstEvent}});
//
// Use mock functions to check if the functions are called, eg.
// expect(globalThis.println.mock.calls).toHaveLength(1);
// See https://jestjs.io/ for more information on Jest.
test('starts in the {{FirstState}} state', () => {
    const sm = new {{SmName}}();
    sm.start();
    expect(sm.stateId).toBe({{SmName}}.StateId.{{FirstState}});
});
";
}
